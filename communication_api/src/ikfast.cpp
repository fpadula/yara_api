/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2021-08-10 19:56:10.012941
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52;
x0=IKsin(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[0]);
x6=IKcos(j[3]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((0.004)*x3);
x13=((0.042)*x6);
x14=((0.17)*x3);
x15=((1.0)*x7);
x16=((1.0)*x8);
x17=((1.0)*x9);
x18=((0.042)*x7);
x19=((1.0)*x0);
x20=((0.042)*x3);
x21=((1.0)*x4);
x22=((1.0)*x3);
x23=((0.042)*x2);
x24=((0.044)*x3);
x25=((1.0)*x6);
x26=((0.004)*x0);
x27=(x2*x5);
x28=(x1*x2);
x29=(x0*x4);
x30=(x1*x5);
x31=(x1*x3);
x32=(x6*x9);
x33=(x4*x5);
x34=(x2*x4);
x35=(x15*x5);
x36=(x0*x15);
x37=(x2*x21);
x38=((((-1.0)*x37))+x31);
x39=((((-1.0)*x1*x22))+x37);
x40=(((x21*x3))+(((1.0)*x28)));
x41=(x38*x6);
x42=(x39*x7);
x43=(x19*(((((-1.0)*x31))+x34)));
x44=((((-1.0)*x21*x27))+((x22*x30)));
IkReal x53=((1.0)*x19);
x45=((((-1.0)*x3*x4*x53))+(((-1.0)*x28*x53)));
x46=((((1.0)*x1*x27))+((x21*x3*x5)));
x47=(x45*x6);
x48=(x46*x6);
x49=(((x15*(((((-1.0)*x0*x28))+(((-1.0)*x29*x3))))))+((x25*x5)));
x50=((((-1.0)*x25*x45))+x35);
x51=(((x19*x6))+((x15*x46)));
x52=((((-1.0)*x25*x46))+x36);
eerot[0]=(((x11*x49))+((x10*(((((-1.0)*x17*x43))+(((-1.0)*x16*x50)))))));
eerot[1]=(((x43*x8))+((x9*(((((-1.0)*x35))+x47)))));
eerot[2]=(((x10*x49))+((x11*((((x50*x8))+((x43*x9)))))));
IkReal x54=((1.0)*x0*x1);
eetrans[0]=((((0.17)*x2*x29))+(((-1.0)*x14*x54))+((x9*(((((-1.0)*x18*x5))+((x13*x45))))))+(((0.044)*x0*x28))+(((0.004)*x5*x7))+(((0.12)*x0*x2))+((x6*((((x12*x29))+((x26*x28))))))+((x8*((((x23*x29))+(((-1.0)*x20*x54))))))+((x24*x29))+(((-0.017)*x0)));
eerot[3]=(((x11*x51))+((x10*(((((-1.0)*x17*x44))+(((-1.0)*x16*x52)))))));
eerot[4]=(((x9*(((((-1.0)*x36))+x48))))+((x44*x8)));
eerot[5]=(((x11*((((x44*x9))+((x52*x8))))))+((x10*x51)));
IkReal x55=((1.0)*x33);
IkReal x56=(x1*x27);
eetrans[1]=((((-0.17)*x27*x4))+(((-1.0)*x24*x55))+(((0.017)*x5))+((x8*((((x20*x30))+(((-1.0)*x23*x55))))))+((x14*x30))+(((-0.12)*x27))+((x6*(((((-1.0)*x12*x55))+(((-0.004)*x56))))))+(((-0.044)*x56))+((x9*(((((-1.0)*x0*x18))+((x13*x46))))))+((x26*x7)));
eerot[6]=(((x11*x42))+((x10*(((((-1.0)*x17*x40))+(((-1.0)*x16*x41)))))));
eerot[7]=(((x40*x8))+((x32*x39)));
eerot[8]=(((x11*((((x41*x8))+((x40*x9))))))+((x10*x42)));
eetrans[2]=((0.11)+((x32*(((((-1.0)*x1*x20))+((x23*x4))))))+((x8*((((x1*x23))+((x20*x4))))))+((x1*x24))+((x14*x4))+(((0.12)*x3))+(((0.17)*x28))+((x6*(((((-0.004)*x34))+((x1*x12))))))+(((-0.044)*x34)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r00);
new_r01=r02;
new_r02=r01;
new_px=(px+(((-0.042)*r01)));
new_r10=((-1.0)*r10);
new_r11=r12;
new_r12=r11;
new_py=(py+(((-0.042)*r11)));
new_r20=((-1.0)*r20);
new_r21=r22;
new_r22=r21;
new_pz=((-0.11)+(((-0.042)*r21))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x57=((1.0)*px);
IkReal x58=((1.0)*pz);
IkReal x59=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x59))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x58)));
rxp0_2=((((-1.0)*r10*x57))+((py*r00)));
rxp1_0=((((-1.0)*r21*x59))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x58)));
rxp1_2=((((-1.0)*r11*x57))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x59)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x58)));
rxp2_2=((((-1.0)*r12*x57))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x60=((0.004)*r20);
IkReal x61=(rxp2_2+(((-1.0)*x60)));
IkReal x62=((0.34)*npz);
IkReal x63=((0.088)*rxp2_0);
IkReal x64=((0.001496)*r22);
IkReal x65=((0.034)*py);
IkReal x66=((0.000136)*r11);
IkReal x67=((0.00578)*r12);
IkReal x68=((1.0)*pp);
IkReal x69=((0.008)*npy);
IkReal x70=((0.000352)*r00);
IkReal x71=((0.00578)*r02);
IkReal x72=((0.088)*rxp2_1);
IkReal x73=((0.034)*px);
IkReal x74=((0.000136)*r01);
IkReal x75=((0.000352)*r10);
IkReal x76=((0.016)*npx);
IkReal x77=((0.000704)*r01);
IkReal x78=((0.000272)*r10);
IkReal x79=((2.0)*rxp1_2);
IkReal x80=((4.0)*rxp0_2);
IkReal x81=((0.01156)*r11);
IkReal x82=((0.000272)*r12);
IkReal x83=((0.68)*npy);
IkReal x84=((0.176)*rxp1_0);
IkReal x85=((0.016)*npz);
IkReal x86=((0.002992)*r21);
IkReal x87=((0.176)*rxp1_1);
IkReal x88=((0.01156)*r01);
IkReal x89=((0.000272)*r02);
IkReal x90=((0.02312)*r10);
IkReal x91=((1.36)*npx);
IkReal x92=((0.005984)*r20);
IkReal x93=((0.352)*rxp0_0);
IkReal x94=((1.0)*rxp2_2);
IkReal x95=((0.000704)*r11);
IkReal x96=((0.000272)*r00);
IkReal x97=(rxp2_2+x60);
IkReal x98=((-0.008)*r21);
IkReal x99=(x96+(((-1.0)*x95)));
IkReal x100=((-2.0)*rxp1_2);
IkReal x101=(x60+(((-1.0)*x94)));
IkReal x102=((-0.016741)+x66);
IkReal x103=((-0.016741)+x69);
IkReal x104=((((0.352)*rxp0_1))+(((0.02312)*r00)));
IkReal x105=((((-1.0)*x94))+(((-1.0)*x60)));
IkReal x106=((((-1.0)*x96))+(((-1.0)*x95)));
IkReal x107=(x77+x78);
IkReal x108=(x65+x67);
IkReal x109=(x88+x87);
IkReal x110=(x84+x85);
IkReal x111=(x83+x86);
IkReal x112=(x82+x81);
IkReal x113=(x62+x64);
IkReal x114=(x63+x65);
IkReal x115=(x91+x92);
IkReal x116=(x67+x68);
IkReal x117=(x63+x69);
IkReal x118=(x72+x71);
IkReal x119=(x74+x73);
IkReal x120=(x109+(((-1.0)*x89)));
IkReal x121=((((-1.0)*x109))+(((-1.0)*x89)));
IkReal x122=(x118+x75);
IkReal x123=((((-1.0)*x73))+x122+x74);
IkReal x124=((((-1.0)*x75))+(((-1.0)*x119))+x118);
IkReal x125=((((-1.0)*x118))+(((-1.0)*x119))+x75);
IkReal x126=((((-1.0)*x73))+(((-1.0)*x122))+x74);
IkReal x127=(x113+x70+x66+x68);
op[0]=x97;
op[1]=x97;
op[2]=x98;
op[3]=x98;
op[4]=x61;
op[5]=x61;
op[6]=((((-1.0)*x116))+x113+x114+x103+x70+(((-1.0)*x66)));
op[7]=x123;
op[8]=((((-1.0)*x107))+x76);
op[9]=x99;
op[10]=((((-1.0)*x70))+(((-1.0)*x116))+x113+x114+x102+(((-1.0)*x69)));
op[11]=x124;
op[12]=x123;
op[13]=((((-1.0)*x70))+(((-1.0)*x114))+x113+x102+x67+x69+(((-1.0)*x68)));
op[14]=x99;
op[15]=(x107+x76);
op[16]=x124;
op[17]=((-0.016741)+(((-1.0)*x114))+x113+x70+x67+(((-1.0)*x69))+(((-1.0)*x68))+(((-1.0)*x66)));
op[18]=0;
op[19]=x97;
op[20]=0;
op[21]=x98;
op[22]=0;
op[23]=x61;
op[24]=x79;
op[25]=x79;
op[26]=x80;
op[27]=x80;
op[28]=x100;
op[29]=x100;
op[30]=(x111+x82+x84+(((-1.0)*x81))+(((-1.0)*x85)));
op[31]=x120;
op[32]=(x115+x93+(((-1.0)*x90)));
op[33]=x104;
op[34]=((((-1.0)*x111))+(((-1.0)*x110))+x112);
op[35]=x121;
op[36]=x120;
op[37]=((((-1.0)*x110))+x111+x81+(((-1.0)*x82)));
op[38]=x104;
op[39]=(x115+x90+(((-1.0)*x93)));
op[40]=x121;
op[41]=((((-1.0)*x111))+(((-1.0)*x112))+x84+(((-1.0)*x85)));
op[42]=0;
op[43]=x79;
op[44]=0;
op[45]=x80;
op[46]=0;
op[47]=x100;
op[48]=x101;
op[49]=x101;
op[50]=x98;
op[51]=x98;
op[52]=x105;
op[53]=x105;
op[54]=((((-1.0)*x113))+(((-1.0)*x117))+x108+x102+x70+(((-1.0)*x68)));
op[55]=x125;
op[56]=((((-1.0)*x76))+(((-1.0)*x77))+x78);
op[57]=x106;
op[58]=((((-1.0)*x127))+x108+x103+(((-1.0)*x63)));
op[59]=x126;
op[60]=x125;
op[61]=((-0.016741)+(((-1.0)*x108))+(((-1.0)*x127))+x63+(((-1.0)*x69)));
op[62]=x106;
op[63]=((((-1.0)*x76))+(((-1.0)*x78))+x77);
op[64]=x126;
op[65]=((((-1.0)*x108))+(((-1.0)*x113))+x117+x102+x70+(((-1.0)*x68)));
op[66]=0;
op[67]=x101;
op[68]=0;
op[69]=x98;
op[70]=0;
op[71]=x105;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j0array[16], cj0array[16], sj0array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj0 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj0)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j0array[numsolutions]=((2.0)*(atan(htj0)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x128=htj4*htj4;
CheckValue<IkReal> x129=IKPowWithIntegerCheck(((1.0)+x128),-1);
if(!x129.valid){
continue;
}
cj4array[numsolutions]=((x129.value)*(((1.0)+(((-1.0)*x128)))));
CheckValue<IkReal> x130=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x130.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x130.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x131=htj5*htj5;
CheckValue<IkReal> x132=IKPowWithIntegerCheck(((1.0)+x131),-1);
if(!x132.valid){
continue;
}
cj5array[numsolutions]=((x132.value)*(((1.0)+(((-1.0)*x131)))));
CheckValue<IkReal> x133=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x133.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x133.value));
}
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x134=htj0*htj0;
CheckValue<IkReal> x135=IKPowWithIntegerCheck(((1.0)+x134),-1);
if(!x135.valid){
continue;
}
cj0array[numsolutions]=((x135.value)*(((1.0)+(((-1.0)*x134)))));
CheckValue<IkReal> x136=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x136.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x136.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj0 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij0[0] = 0; _ij0[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj0array[ij4]-cj0array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij4]-sj0array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij0[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j0 = j0array[ij4]; cj0 = cj0array[ij4]; sj0 = sj0array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x137=(sj0*sj5);
IkReal x138=((1.0)*cj5*sj0);
IkReal x139=(((r00*sj4*sj5))+((cj5*r01*sj4))+((cj4*r02)));
j3eval[0]=x139;
j3eval[1]=IKsign(x139);
j3eval[2]=((IKabs((((r21*x137))+(((-1.0)*r20*x138)))))+(IKabs(((((-1.0)*cj4*r21*x138))+((r22*sj0*sj4))+(((-1.0)*cj4*r20*x137))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x140=((1.0)*sj4);
IkReal x141=(cj0*r21);
IkReal x142=((1.0)*cj5);
IkReal x143=(cj0*r20);
IkReal x144=((1.0)*cj4);
IkReal x145=((((-1.0)*cj5*r11*x140))+(((-1.0)*r12*x144))+(((-1.0)*r10*sj5*x140)));
j3eval[0]=x145;
j3eval[1]=((IKabs(((((-1.0)*sj5*x143*x144))+(((-1.0)*cj4*x141*x142))+((cj0*r22*sj4)))))+(IKabs(((((-1.0)*x142*x143))+((sj5*x141))))));
j3eval[2]=IKsign(x145);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x146=((1.0)*sj4);
IkReal x147=((((-1.0)*r20*sj5*x146))+(((-1.0)*cj5*r21*x146))+(((-1.0)*cj4*r22)));
j3eval[0]=x147;
j3eval[1]=IKsign(x147);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x148=((1.0)*r20);
IkReal x149=(((r00*sj4*sj5))+((cj5*r01*sj4))+((cj4*r02)));
j3eval[0]=x149;
j3eval[1]=IKsign(x149);
j3eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x148)))))+(IKabs(((((-1.0)*cj4*sj5*x148))+((r22*sj4))+(((-1.0)*cj4*cj5*r21))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x150=((1.0)*sj4);
IkReal x151=((1.0)*cj4);
IkReal x152=((((-1.0)*r20*sj5*x150))+(((-1.0)*cj5*r21*x150))+(((-1.0)*r22*x151)));
j3eval[0]=x152;
j3eval[1]=((IKabs((((r02*sj4))+(((-1.0)*cj5*r01*x151))+(((-1.0)*r00*sj5*x151)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j3eval[2]=IKsign(x152);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x153=cj4*cj4;
IkReal x154=cj5*cj5;
IkReal x155=r10*r10;
IkReal x156=r11*r11;
IkReal x157=r12*r12;
IkReal x158=(cj5*r10);
IkReal x159=((1.0)*x153);
IkReal x160=(cj4*r10*sj5);
IkReal x161=((2.0)*r12*sj4);
IkReal x162=((2.0)*r11*sj5);
IkReal x163=(cj4*cj5*r11);
IkReal x164=(x154*x156);
IkReal x165=(x154*x155);
IkReal x166=(((x153*x157))+((x161*x163))+(((-1.0)*x159*x164))+x164+(((-1.0)*x165))+(((-1.0)*x156))+(((-1.0)*x157))+(((-1.0)*x155*x159))+((x158*x162))+((x160*x161))+(((-1.0)*x153*x158*x162))+((x153*x165)));
j3eval[0]=x166;
j3eval[1]=IKsign(x166);
j3eval[2]=((IKabs(((((-1.0)*x163))+(((-1.0)*x160))+((r12*sj4)))))+(IKabs((x158+(((-1.0)*r11*sj5))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x167=cj4*cj4;
IkReal x168=cj5*cj5;
IkReal x169=r10*r10;
IkReal x170=r11*r11;
IkReal x171=r12*r12;
IkReal x172=(cj5*r11);
IkReal x173=(r10*sj5);
IkReal x174=((1.0)*cj4);
IkReal x175=((1.0)*x167);
IkReal x176=(x168*x170);
IkReal x177=((2.0)*cj4*r12*sj4);
IkReal x178=(x168*x169);
CheckValue<IkReal> x179=IKPowWithIntegerCheck(IKsign(((((-1.0)*x175*x176))+((x172*x177))+((x173*x177))+(((-1.0)*x171))+(((-1.0)*x170))+(((-1.0)*x178))+(((2.0)*x172*x173))+x176+((x167*x178))+((x167*x171))+(((-2.0)*x167*x172*x173))+(((-1.0)*x169*x175)))),-1);
if(!x179.valid){
continue;
}
CheckValue<IkReal> x180 = IKatan2WithCheck(IkReal((((r12*sj4))+(((-1.0)*x172*x174))+(((-1.0)*x173*x174)))),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x180.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x179.value)))+(x180.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x181=IKsin(j3);
IkReal x182=IKcos(j3);
IkReal x183=(cj4*cj5);
IkReal x184=(r12*sj4);
IkReal x185=(cj5*r10);
IkReal x186=((1.0)*x182);
IkReal x187=(r11*x181);
IkReal x188=((1.0)*x181);
IkReal x189=(sj5*x182);
IkReal x190=(cj4*sj5*x181);
evalcond[0]=((((-1.0)*r22*sj4*x188))+(((-1.0)*cj5*r20*x186))+((r21*x181*x183))+((r20*x190))+((r21*x189)));
evalcond[1]=(((r01*x189))+(((-1.0)*r02*sj4*x188))+((r01*x181*x183))+((r00*x190))+(((-1.0)*cj5*r00*x186)));
evalcond[2]=((-1.0)+(((-1.0)*x184*x188))+(((-1.0)*x185*x186))+((r10*x190))+((r11*x189))+((x183*x187)));
evalcond[3]=((((-1.0)*r11*x183*x186))+(((-1.0)*cj4*r10*sj5*x186))+(((-1.0)*x185*x188))+((sj5*x187))+((x182*x184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x191=((12.0)*pz);
IkReal x192=((0.176)*sj4);
IkReal x193=(r00*sj5);
IkReal x194=((0.528)*sj4);
IkReal x195=(cj5*r01);
IkReal x196=((0.016)*cj4);
IkReal x197=(cj5*r21);
IkReal x198=(r20*sj5);
IkReal x199=((0.048)*cj4);
IkReal x200=((0.68)*sj4);
IkReal x201=((2.04)*sj4);
IkReal x202=(cj4*r22);
IkReal x203=(r02*sj4);
IkReal x204=(cj4*r02);
IkReal x205=(r22*sj4);
IkReal x206=((0.048)*x205);
IkReal x207=((0.528)*x204);
IkReal x208=(x194*x195);
IkReal x209=(x193*x194);
IkReal x210=(x191+x207+x206+x209+x208);
IkReal x211=(((x198*x201))+((x198*x199))+(((2.04)*x202))+((x197*x201))+((x197*x199)));
j1eval[0]=((3.84)+(IKabs(((-0.48)+x210+(((-1.0)*x211)))))+(IKabs(((0.48)+x210+(((-1.0)*x211)))))+(IKabs(((0.48)+(((-1.0)*x196*x197))+(((-1.0)*x196*x198))+(((4.0)*pz))+(((-1.0)*x197*x200))+(((0.016)*x205))+((x192*x195))+((x192*x193))+(((-1.0)*x198*x200))+(((0.176)*x204))+(((-0.68)*x202)))))+(IKabs(((0.068)+(((-1.0)*x195*x200))+(((-1.0)*x192*x197))+(((-1.0)*x192*x198))+(((-1.0)*x195*x196))+(((4.0)*px))+(((0.016)*x203))+(((-1.0)*x193*x200))+(((-1.0)*x193*x196))+(((-0.176)*x202))+(((-0.68)*x204)))))+(((2.0)*(IKabs(((0.204)+(((-1.0)*x195*x201))+(((-0.528)*x202))+(((-1.0)*x194*x198))+(((-1.0)*x194*x197))+(((12.0)*px))+(((-1.0)*x195*x199))+(((-2.04)*x204))+(((-1.0)*x193*x201))+(((0.048)*x203))+(((-1.0)*x193*x199))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x212=((12.0)*pz);
IkReal x213=((4.0)*pz);
IkReal x214=(sj4*sj5);
IkReal x215=(cj5*sj4);
IkReal x216=((0.016)*cj4);
IkReal x217=(cj5*r21);
IkReal x218=(r20*sj5);
IkReal x219=((0.048)*cj4);
IkReal x220=(cj4*r02);
IkReal x221=(r22*sj4);
IkReal x222=(cj4*r22);
IkReal x223=((0.048)*x221);
IkReal x224=((0.528)*x220);
IkReal x225=((0.016)*x221);
IkReal x226=((0.176)*x220);
IkReal x227=((0.528)*r01*x215);
IkReal x228=((0.528)*r00*x214);
IkReal x229=((0.176)*r01*x215);
IkReal x230=((0.176)*r00*x214);
IkReal x231=(x212+x228+x223+x224+x227);
IkReal x232=(x213+x229+x225+x226+x230);
IkReal x233=(((x218*x219))+(((2.04)*r20*x214))+(((2.04)*r21*x215))+(((2.04)*x222))+((x217*x219)));
IkReal x234=(((x216*x217))+((x216*x218))+(((0.68)*r20*x214))+(((0.68)*r21*x215))+(((0.68)*x222)));
op[0]=((0.48)+(((-1.0)*x234))+x232);
op[1]=0;
op[2]=((0.48)+(((-1.0)*x233))+x231);
op[3]=0;
op[4]=((-0.48)+(((-1.0)*x233))+x231);
op[5]=0;
op[6]=((-0.48)+(((-1.0)*x234))+x232);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x235=((4.0)*px);
IkReal x236=(cj4*r22);
IkReal x237=(cj5*sj4);
IkReal x238=(sj4*sj5);
IkReal x239=((0.016)*cj4);
IkReal x240=(cj5*r01);
IkReal x241=(r00*sj5);
IkReal x242=(r02*sj4);
IkReal x243=(cj4*r02);
IkReal x244=((0.048)*cj4);
IkReal x245=((0.016)*x242);
IkReal x246=((0.68)*x243);
IkReal x247=((0.176)*x236);
IkReal x248=(x239*x240);
IkReal x249=((0.176)*r20*x238);
IkReal x250=((0.68)*r01*x237);
IkReal x251=((0.68)*r00*x238);
IkReal x252=(x239*x241);
IkReal x253=((0.176)*r21*x237);
IkReal x254=((0.068)+x235+x245);
IkReal x255=(x250+x251+x252+x253+x247+x246+x249+x248);
IkReal x256=((0.204)+(((-0.528)*x236))+(((0.048)*x242))+(((12.0)*px))+(((-2.04)*r00*x238))+(((-2.04)*r01*x237))+(((-1.0)*x241*x244))+(((-0.528)*r20*x238))+(((-2.04)*x243))+(((-0.528)*r21*x237))+(((-1.0)*x240*x244)));
j1evalpoly[0]=((((-0.96)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x254+(((-1.0)*x255))))))+((x256*(htj1*htj1*htj1*htj1)))+(((-1.92)*(htj1*htj1*htj1)))+x254+((x256*(htj1*htj1)))+(((-0.96)*htj1))+(((-1.0)*x255)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x257=(cj4*sj1);
IkReal x258=(cj1*cj4);
IkReal x259=(cj5*sj4);
IkReal x260=((1.0)*cj1);
IkReal x261=(sj4*sj5);
IkReal x262=(sj1*x261);
if( IKabs((((cj1*r21*x259))+((cj1*r20*x261))+((r00*x262))+((r22*x258))+((r01*sj1*x259))+((r02*x257)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x259*x260))+((r21*sj1*x259))+(((-1.0)*r02*x258))+((r22*x257))+(((-1.0)*r00*x260*x261))+((r20*x262)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r21*x259))+((cj1*r20*x261))+((r00*x262))+((r22*x258))+((r01*sj1*x259))+((r02*x257))))+IKsqr(((((-1.0)*r01*x259*x260))+((r21*sj1*x259))+(((-1.0)*r02*x258))+((r22*x257))+(((-1.0)*r00*x260*x261))+((r20*x262))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r21*x259))+((cj1*r20*x261))+((r00*x262))+((r22*x258))+((r01*sj1*x259))+((r02*x257))), ((((-1.0)*r01*x259*x260))+((r21*sj1*x259))+(((-1.0)*r02*x258))+((r22*x257))+(((-1.0)*r00*x260*x261))+((r20*x262))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x263=IKsin(j2);
IkReal x264=IKcos(j2);
IkReal x265=(r02*sj4);
IkReal x266=((1.0)*cj5);
IkReal x267=(cj4*r01);
IkReal x268=((0.004)*cj5);
IkReal x269=(cj4*r21);
IkReal x270=(sj3*sj5);
IkReal x271=((1.0)*sj5);
IkReal x272=(cj4*r20);
IkReal x273=((1.0)*cj4);
IkReal x274=((0.004)*sj5);
IkReal x275=(r22*sj4);
IkReal x276=(cj4*r00);
IkReal x277=(sj1*x264);
IkReal x278=(cj1*x263);
IkReal x279=(cj1*x264);
IkReal x280=(sj1*x263);
IkReal x281=(x277+x278);
evalcond[0]=((((-1.0)*r21*sj4*x266))+x281+(((-1.0)*r22*x273))+(((-1.0)*r20*sj4*x271)));
evalcond[1]=((((-1.0)*x279))+(((-1.0)*r01*sj4*x266))+x280+(((-1.0)*r02*x273))+(((-1.0)*r00*sj4*x271)));
evalcond[2]=((((-1.0)*cj3*x271*x276))+(((-1.0)*cj3*x266*x267))+x281+(((-1.0)*r00*sj3*x266))+((r01*x270))+((cj3*x265)));
evalcond[3]=((((-1.0)*cj3*x271*x272))+(((-1.0)*cj3*x266*x269))+(((-1.0)*r20*sj3*x266))+((r21*x270))+x279+(((-1.0)*x280))+((cj3*x275)));
evalcond[4]=(((x272*x274))+(((0.17)*x277))+(((0.17)*x278))+(((0.044)*x279))+(((-0.004)*x275))+(((-1.0)*pz))+(((-0.044)*x280))+(((0.12)*cj1))+((x268*x269)));
evalcond[5]=((-0.017)+((x267*x268))+(((0.044)*x277))+(((0.044)*x278))+((x274*x276))+(((-0.004)*x265))+(((0.12)*sj1))+(((-1.0)*px))+(((0.17)*x280))+(((-0.17)*x279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x282=((1.0)*sj4);
IkReal x283=((1.0)*cj4);
CheckValue<IkReal> x284 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((((-1.0)*r00*sj5*x283))+((r02*sj4))+(((-1.0)*cj5*r01*x283)))),IKFAST_ATAN2_MAGTHRESH);
if(!x284.valid){
continue;
}
CheckValue<IkReal> x285=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5*x282))+(((-1.0)*cj5*r21*x282))+(((-1.0)*r22*x283)))),-1);
if(!x285.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x284.value)+(((1.5707963267949)*(x285.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x286=IKsin(j3);
IkReal x287=IKcos(j3);
IkReal x288=(cj4*cj5);
IkReal x289=(r12*sj4);
IkReal x290=(cj5*r10);
IkReal x291=((1.0)*x287);
IkReal x292=(r11*x286);
IkReal x293=((1.0)*x286);
IkReal x294=(sj5*x287);
IkReal x295=(cj4*sj5*x286);
evalcond[0]=((((-1.0)*r22*sj4*x293))+((r20*x295))+((r21*x286*x288))+((r21*x294))+(((-1.0)*cj5*r20*x291)));
evalcond[1]=((((-1.0)*cj5*r00*x291))+((r01*x294))+((r00*x295))+((r01*x286*x288))+(((-1.0)*r02*sj4*x293)));
evalcond[2]=((-1.0)+(((-1.0)*x290*x291))+(((-1.0)*x289*x293))+((r10*x295))+((x288*x292))+((r11*x294)));
evalcond[3]=(((sj5*x292))+(((-1.0)*x290*x293))+(((-1.0)*cj4*r10*sj5*x291))+((x287*x289))+(((-1.0)*r11*x288*x291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x296=((12.0)*pz);
IkReal x297=((0.176)*sj4);
IkReal x298=(r00*sj5);
IkReal x299=((0.528)*sj4);
IkReal x300=(cj5*r01);
IkReal x301=((0.016)*cj4);
IkReal x302=(cj5*r21);
IkReal x303=(r20*sj5);
IkReal x304=((0.048)*cj4);
IkReal x305=((0.68)*sj4);
IkReal x306=((2.04)*sj4);
IkReal x307=(cj4*r22);
IkReal x308=(r02*sj4);
IkReal x309=(cj4*r02);
IkReal x310=(r22*sj4);
IkReal x311=((0.048)*x310);
IkReal x312=((0.528)*x309);
IkReal x313=(x299*x300);
IkReal x314=(x298*x299);
IkReal x315=(x314+x311+x313+x312+x296);
IkReal x316=(((x303*x306))+((x303*x304))+(((2.04)*x307))+((x302*x306))+((x302*x304)));
j1eval[0]=((3.84)+(((2.0)*(IKabs(((0.204)+(((-1.0)*x298*x306))+(((-1.0)*x298*x304))+(((12.0)*px))+(((-2.04)*x309))+(((0.048)*x308))+(((-1.0)*x299*x302))+(((-1.0)*x299*x303))+(((-0.528)*x307))+(((-1.0)*x300*x304))+(((-1.0)*x300*x306)))))))+(IKabs(((0.068)+(((-0.176)*x307))+(((-1.0)*x298*x301))+(((-1.0)*x298*x305))+(((4.0)*px))+(((-1.0)*x297*x302))+(((-1.0)*x297*x303))+(((0.016)*x308))+(((-0.68)*x309))+(((-1.0)*x300*x301))+(((-1.0)*x300*x305)))))+(IKabs(((0.48)+(((-1.0)*x301*x302))+(((-1.0)*x301*x303))+(((4.0)*pz))+(((-1.0)*x303*x305))+(((-1.0)*x302*x305))+(((0.176)*x309))+((x297*x300))+((x297*x298))+(((-0.68)*x307))+(((0.016)*x310)))))+(IKabs(((0.48)+x315+(((-1.0)*x316)))))+(IKabs(((-0.48)+x315+(((-1.0)*x316))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x317=((12.0)*pz);
IkReal x318=((4.0)*pz);
IkReal x319=(sj4*sj5);
IkReal x320=(cj5*sj4);
IkReal x321=((0.016)*cj4);
IkReal x322=(cj5*r21);
IkReal x323=(r20*sj5);
IkReal x324=((0.048)*cj4);
IkReal x325=(cj4*r02);
IkReal x326=(r22*sj4);
IkReal x327=(cj4*r22);
IkReal x328=((0.048)*x326);
IkReal x329=((0.528)*x325);
IkReal x330=((0.016)*x326);
IkReal x331=((0.176)*x325);
IkReal x332=((0.528)*r01*x320);
IkReal x333=((0.528)*r00*x319);
IkReal x334=((0.176)*r01*x320);
IkReal x335=((0.176)*r00*x319);
IkReal x336=(x333+x332+x328+x329+x317);
IkReal x337=(x331+x330+x335+x334+x318);
IkReal x338=(((x322*x324))+((x323*x324))+(((2.04)*r21*x320))+(((2.04)*x327))+(((2.04)*r20*x319)));
IkReal x339=((((0.68)*r20*x319))+(((0.68)*r21*x320))+(((0.68)*x327))+((x321*x323))+((x321*x322)));
op[0]=((0.48)+x337+(((-1.0)*x339)));
op[1]=0;
op[2]=((0.48)+x336+(((-1.0)*x338)));
op[3]=0;
op[4]=((-0.48)+x336+(((-1.0)*x338)));
op[5]=0;
op[6]=((-0.48)+x337+(((-1.0)*x339)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x340=((4.0)*px);
IkReal x341=(cj4*r22);
IkReal x342=(cj5*sj4);
IkReal x343=(sj4*sj5);
IkReal x344=((0.016)*cj4);
IkReal x345=(cj5*r01);
IkReal x346=(r00*sj5);
IkReal x347=(r02*sj4);
IkReal x348=(cj4*r02);
IkReal x349=((0.048)*cj4);
IkReal x350=((0.016)*x347);
IkReal x351=((0.68)*x348);
IkReal x352=((0.176)*x341);
IkReal x353=(x344*x345);
IkReal x354=((0.176)*r20*x343);
IkReal x355=((0.68)*r01*x342);
IkReal x356=((0.68)*r00*x343);
IkReal x357=(x344*x346);
IkReal x358=((0.176)*r21*x342);
IkReal x359=((0.068)+x350+x340);
IkReal x360=(x351+x353+x352+x355+x354+x357+x356+x358);
IkReal x361=((0.204)+(((12.0)*px))+(((-0.528)*r20*x343))+(((0.048)*x347))+(((-0.528)*x341))+(((-2.04)*x348))+(((-1.0)*x345*x349))+(((-1.0)*x346*x349))+(((-2.04)*r01*x342))+(((-2.04)*r00*x343))+(((-0.528)*r21*x342)));
j1evalpoly[0]=(((x361*(htj1*htj1*htj1*htj1)))+(((-0.96)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x360))+(((-1.92)*(htj1*htj1*htj1)))+((x361*(htj1*htj1)))+x359+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x360))+x359))))+(((-0.96)*htj1)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x362=(cj4*sj1);
IkReal x363=(cj1*cj4);
IkReal x364=(cj5*sj4);
IkReal x365=((1.0)*cj1);
IkReal x366=(sj4*sj5);
IkReal x367=(sj1*x366);
if( IKabs((((r00*x367))+((cj1*r21*x364))+((r01*sj1*x364))+((cj1*r20*x366))+((r22*x363))+((r02*x362)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x367))+((r21*sj1*x364))+(((-1.0)*r02*x363))+(((-1.0)*r00*x365*x366))+((r22*x362))+(((-1.0)*r01*x364*x365)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x367))+((cj1*r21*x364))+((r01*sj1*x364))+((cj1*r20*x366))+((r22*x363))+((r02*x362))))+IKsqr((((r20*x367))+((r21*sj1*x364))+(((-1.0)*r02*x363))+(((-1.0)*r00*x365*x366))+((r22*x362))+(((-1.0)*r01*x364*x365))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x367))+((cj1*r21*x364))+((r01*sj1*x364))+((cj1*r20*x366))+((r22*x363))+((r02*x362))), (((r20*x367))+((r21*sj1*x364))+(((-1.0)*r02*x363))+(((-1.0)*r00*x365*x366))+((r22*x362))+(((-1.0)*r01*x364*x365))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x368=IKsin(j2);
IkReal x369=IKcos(j2);
IkReal x370=(r02*sj4);
IkReal x371=((1.0)*cj5);
IkReal x372=(cj4*r01);
IkReal x373=((0.004)*cj5);
IkReal x374=(cj4*r21);
IkReal x375=(sj3*sj5);
IkReal x376=((1.0)*sj5);
IkReal x377=(cj4*r20);
IkReal x378=((1.0)*cj4);
IkReal x379=((0.004)*sj5);
IkReal x380=(r22*sj4);
IkReal x381=(cj4*r00);
IkReal x382=(sj1*x369);
IkReal x383=(cj1*x368);
IkReal x384=(cj1*x369);
IkReal x385=(sj1*x368);
IkReal x386=(x382+x383);
evalcond[0]=((((-1.0)*r21*sj4*x371))+(((-1.0)*r20*sj4*x376))+x386+(((-1.0)*r22*x378)));
evalcond[1]=((((-1.0)*r02*x378))+x385+(((-1.0)*r00*sj4*x376))+(((-1.0)*x384))+(((-1.0)*r01*sj4*x371)));
evalcond[2]=(((r01*x375))+(((-1.0)*r00*sj3*x371))+x386+(((-1.0)*cj3*x376*x381))+(((-1.0)*cj3*x371*x372))+((cj3*x370)));
evalcond[3]=((((-1.0)*r20*sj3*x371))+(((-1.0)*cj3*x376*x377))+((cj3*x380))+x384+(((-1.0)*x385))+(((-1.0)*cj3*x371*x374))+((r21*x375)));
evalcond[4]=((((-0.044)*x385))+(((-1.0)*pz))+(((-0.004)*x380))+(((0.17)*x383))+(((0.17)*x382))+((x377*x379))+((x373*x374))+(((0.12)*cj1))+(((0.044)*x384)));
evalcond[5]=((-0.017)+(((-0.17)*x384))+((x372*x373))+(((0.12)*sj1))+(((-1.0)*px))+((x379*x381))+(((0.17)*x385))+(((0.044)*x383))+(((0.044)*x382))+(((-0.004)*x370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x387=((1.0)*r20);
CheckValue<IkReal> x388 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*x387)))),IkReal((((r22*sj4))+(((-1.0)*cj4*sj5*x387))+(((-1.0)*cj4*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x388.valid){
continue;
}
CheckValue<IkReal> x389=IKPowWithIntegerCheck(IKsign((((r00*sj4*sj5))+((cj5*r01*sj4))+((cj4*r02)))),-1);
if(!x389.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x388.value)+(((1.5707963267949)*(x389.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x390=IKsin(j3);
IkReal x391=IKcos(j3);
IkReal x392=(cj4*cj5);
IkReal x393=(r12*sj4);
IkReal x394=(cj5*r10);
IkReal x395=((1.0)*x391);
IkReal x396=(r11*x390);
IkReal x397=((1.0)*x390);
IkReal x398=(sj5*x391);
IkReal x399=(cj4*sj5*x390);
evalcond[0]=(((r20*x399))+((r21*x390*x392))+(((-1.0)*r22*sj4*x397))+((r21*x398))+(((-1.0)*cj5*r20*x395)));
evalcond[1]=(((r01*x390*x392))+(((-1.0)*r02*sj4*x397))+((r00*x399))+((r01*x398))+(((-1.0)*cj5*r00*x395)));
evalcond[2]=((-1.0)+((r10*x399))+(((-1.0)*x394*x395))+((r11*x398))+(((-1.0)*x393*x397))+((x392*x396)));
evalcond[3]=((((-1.0)*r11*x392*x395))+(((-1.0)*x394*x397))+(((-1.0)*cj4*r10*sj5*x395))+((x391*x393))+((sj5*x396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x400=((12.0)*pz);
IkReal x401=((0.176)*sj4);
IkReal x402=(r00*sj5);
IkReal x403=((0.528)*sj4);
IkReal x404=(cj5*r01);
IkReal x405=((0.016)*cj4);
IkReal x406=(cj5*r21);
IkReal x407=(r20*sj5);
IkReal x408=((0.048)*cj4);
IkReal x409=((0.68)*sj4);
IkReal x410=((2.04)*sj4);
IkReal x411=(cj4*r22);
IkReal x412=(r02*sj4);
IkReal x413=(cj4*r02);
IkReal x414=(r22*sj4);
IkReal x415=((0.048)*x414);
IkReal x416=((0.528)*x413);
IkReal x417=(x403*x404);
IkReal x418=(x402*x403);
IkReal x419=(x400+x416+x417+x415+x418);
IkReal x420=(((x407*x408))+(((2.04)*x411))+((x407*x410))+((x406*x410))+((x406*x408)));
j1eval[0]=((3.84)+(IKabs(((-0.48)+(((-1.0)*x420))+x419)))+(IKabs(((0.48)+(((-0.68)*x411))+(((-1.0)*x406*x409))+(((4.0)*pz))+(((0.016)*x414))+(((0.176)*x413))+(((-1.0)*x407*x409))+(((-1.0)*x405*x407))+(((-1.0)*x405*x406))+((x401*x402))+((x401*x404)))))+(IKabs(((0.48)+(((-1.0)*x420))+x419)))+(((2.0)*(IKabs(((0.204)+(((12.0)*px))+(((-1.0)*x402*x410))+(((-1.0)*x403*x407))+(((-1.0)*x403*x406))+(((-1.0)*x402*x408))+(((0.048)*x412))+(((-1.0)*x404*x408))+(((-1.0)*x404*x410))+(((-2.04)*x413))+(((-0.528)*x411)))))))+(IKabs(((0.068)+(((-0.68)*x413))+(((4.0)*px))+(((0.016)*x412))+(((-1.0)*x402*x405))+(((-1.0)*x402*x409))+(((-1.0)*x401*x406))+(((-1.0)*x401*x407))+(((-1.0)*x404*x409))+(((-1.0)*x404*x405))+(((-0.176)*x411))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x421=((12.0)*pz);
IkReal x422=((4.0)*pz);
IkReal x423=(sj4*sj5);
IkReal x424=(cj5*sj4);
IkReal x425=((0.016)*cj4);
IkReal x426=(cj5*r21);
IkReal x427=(r20*sj5);
IkReal x428=((0.048)*cj4);
IkReal x429=(cj4*r02);
IkReal x430=(r22*sj4);
IkReal x431=(cj4*r22);
IkReal x432=((0.048)*x430);
IkReal x433=((0.528)*x429);
IkReal x434=((0.016)*x430);
IkReal x435=((0.176)*x429);
IkReal x436=((0.528)*r01*x424);
IkReal x437=((0.528)*r00*x423);
IkReal x438=((0.176)*r01*x424);
IkReal x439=((0.176)*r00*x423);
IkReal x440=(x421+x432+x433+x436+x437);
IkReal x441=(x422+x438+x439+x434+x435);
IkReal x442=(((x426*x428))+((x427*x428))+(((2.04)*r20*x423))+(((2.04)*r21*x424))+(((2.04)*x431)));
IkReal x443=((((0.68)*x431))+((x425*x426))+((x425*x427))+(((0.68)*r21*x424))+(((0.68)*r20*x423)));
op[0]=((0.48)+(((-1.0)*x443))+x441);
op[1]=0;
op[2]=((0.48)+(((-1.0)*x442))+x440);
op[3]=0;
op[4]=((-0.48)+(((-1.0)*x442))+x440);
op[5]=0;
op[6]=((-0.48)+(((-1.0)*x443))+x441);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x444=((4.0)*px);
IkReal x445=(cj4*r22);
IkReal x446=(cj5*sj4);
IkReal x447=(sj4*sj5);
IkReal x448=((0.016)*cj4);
IkReal x449=(cj5*r01);
IkReal x450=(r00*sj5);
IkReal x451=(r02*sj4);
IkReal x452=(cj4*r02);
IkReal x453=((0.048)*cj4);
IkReal x454=((0.016)*x451);
IkReal x455=((0.68)*x452);
IkReal x456=((0.176)*x445);
IkReal x457=(x448*x449);
IkReal x458=((0.176)*r20*x447);
IkReal x459=((0.68)*r01*x446);
IkReal x460=((0.68)*r00*x447);
IkReal x461=(x448*x450);
IkReal x462=((0.176)*r21*x446);
IkReal x463=((0.068)+x444+x454);
IkReal x464=(x458+x459+x456+x457+x455+x462+x461+x460);
IkReal x465=((0.204)+(((0.048)*x451))+(((-2.04)*r01*x446))+(((12.0)*px))+(((-2.04)*r00*x447))+(((-0.528)*r21*x446))+(((-2.04)*x452))+(((-0.528)*x445))+(((-1.0)*x450*x453))+(((-0.528)*r20*x447))+(((-1.0)*x449*x453)));
j1evalpoly[0]=((((-0.96)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.92)*(htj1*htj1*htj1)))+(((-1.0)*x464))+x463+((x465*(htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x464))+x463))))+(((-0.96)*htj1))+((x465*(htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x466=(cj4*sj1);
IkReal x467=(cj1*cj4);
IkReal x468=(cj5*sj4);
IkReal x469=((1.0)*cj1);
IkReal x470=(sj4*sj5);
IkReal x471=(sj1*x470);
if( IKabs((((cj1*r20*x470))+((r22*x467))+((r01*sj1*x468))+((r02*x466))+((cj1*r21*x468))+((r00*x471)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x466))+((r20*x471))+(((-1.0)*r01*x468*x469))+(((-1.0)*r00*x469*x470))+(((-1.0)*r02*x467))+((r21*sj1*x468)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x470))+((r22*x467))+((r01*sj1*x468))+((r02*x466))+((cj1*r21*x468))+((r00*x471))))+IKsqr((((r22*x466))+((r20*x471))+(((-1.0)*r01*x468*x469))+(((-1.0)*r00*x469*x470))+(((-1.0)*r02*x467))+((r21*sj1*x468))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x470))+((r22*x467))+((r01*sj1*x468))+((r02*x466))+((cj1*r21*x468))+((r00*x471))), (((r22*x466))+((r20*x471))+(((-1.0)*r01*x468*x469))+(((-1.0)*r00*x469*x470))+(((-1.0)*r02*x467))+((r21*sj1*x468))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x472=IKsin(j2);
IkReal x473=IKcos(j2);
IkReal x474=(r02*sj4);
IkReal x475=((1.0)*cj5);
IkReal x476=(cj4*r01);
IkReal x477=((0.004)*cj5);
IkReal x478=(cj4*r21);
IkReal x479=(sj3*sj5);
IkReal x480=((1.0)*sj5);
IkReal x481=(cj4*r20);
IkReal x482=((1.0)*cj4);
IkReal x483=((0.004)*sj5);
IkReal x484=(r22*sj4);
IkReal x485=(cj4*r00);
IkReal x486=(sj1*x473);
IkReal x487=(cj1*x472);
IkReal x488=(cj1*x473);
IkReal x489=(sj1*x472);
IkReal x490=(x487+x486);
evalcond[0]=((((-1.0)*r20*sj4*x480))+x490+(((-1.0)*r22*x482))+(((-1.0)*r21*sj4*x475)));
evalcond[1]=((((-1.0)*r00*sj4*x480))+(((-1.0)*x488))+(((-1.0)*r01*sj4*x475))+x489+(((-1.0)*r02*x482)));
evalcond[2]=((((-1.0)*r00*sj3*x475))+(((-1.0)*cj3*x475*x476))+((cj3*x474))+(((-1.0)*cj3*x480*x485))+x490+((r01*x479)));
evalcond[3]=(((cj3*x484))+((r21*x479))+(((-1.0)*cj3*x475*x478))+(((-1.0)*r20*sj3*x475))+(((-1.0)*cj3*x480*x481))+(((-1.0)*x489))+x488);
evalcond[4]=((((-0.004)*x484))+((x481*x483))+(((-1.0)*pz))+(((0.044)*x488))+((x477*x478))+(((-0.044)*x489))+(((0.17)*x487))+(((0.17)*x486))+(((0.12)*cj1)));
evalcond[5]=((-0.017)+((x483*x485))+(((0.12)*sj1))+(((-1.0)*px))+(((0.044)*x486))+(((0.044)*x487))+(((-0.004)*x474))+(((0.17)*x489))+(((-0.17)*x488))+((x476*x477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x491=((1.0)*r00);
IkReal x492=(((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)));
j3eval[0]=x492;
j3eval[1]=IKsign(x492);
j3eval[2]=((IKabs(((((-1.0)*cj4*cj5*r01))+((r02*sj4))+(((-1.0)*cj4*sj5*x491)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*x491))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x493=((1.0)*sj5);
IkReal x494=((1.0)*cj5);
IkReal x495=((((-1.0)*r01*sj4*x494))+(((-1.0)*cj4*r02))+(((-1.0)*r00*sj4*x493)));
j3eval[0]=x495;
j3eval[1]=IKsign(x495);
j3eval[2]=((IKabs((((r21*sj5))+(((-1.0)*r20*x494)))))+(IKabs((((r22*sj4))+(((-1.0)*cj4*r21*x494))+(((-1.0)*cj4*r20*x493))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x496=cj4*cj4;
IkReal x497=r11*r11;
IkReal x498=cj5*cj5;
IkReal x499=r10*r10;
IkReal x500=r12*r12;
IkReal x501=(cj5*r11);
IkReal x502=((1.0)*cj4);
IkReal x503=((1.0)*x496);
IkReal x504=((2.0)*r10*sj5);
IkReal x505=(cj4*r12*sj4);
IkReal x506=(x498*x499);
IkReal x507=(x497*x498);
IkReal x508=(((x496*x499))+(((-1.0)*x501*x504))+((x496*x501*x504))+(((-2.0)*x501*x505))+(((-1.0)*x503*x506))+x497+((x496*x507))+x500+x506+(((-1.0)*x504*x505))+(((-1.0)*x507))+(((-1.0)*x500*x503)));
j3eval[0]=x508;
j3eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*sj5)))))+(IKabs(((((-1.0)*r10*sj5*x502))+(((-1.0)*x501*x502))+((r12*sj4))))));
j3eval[2]=IKsign(x508);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x509=cj4*cj4;
IkReal x510=r11*r11;
IkReal x511=cj5*cj5;
IkReal x512=r10*r10;
IkReal x513=r12*r12;
IkReal x514=(cj5*r11);
IkReal x515=((1.0)*sj5);
IkReal x516=((2.0)*r10*sj5);
IkReal x517=(cj4*r12*sj4);
IkReal x518=((1.0)*x509);
IkReal x519=(x511*x512);
IkReal x520=(x510*x511);
CheckValue<IkReal> x521=IKPowWithIntegerCheck(IKsign(((((-1.0)*x514*x516))+(((-1.0)*x520))+(((-1.0)*x513*x518))+((x509*x520))+(((-1.0)*x518*x519))+(((-1.0)*x516*x517))+(((-2.0)*x514*x517))+x519+x513+x510+((x509*x514*x516))+((x509*x512)))),-1);
if(!x521.valid){
continue;
}
CheckValue<IkReal> x522 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r10*x515))+((r12*sj4))+(((-1.0)*cj4*x514)))),IkReal((((cj5*r10))+(((-1.0)*r11*x515)))),IKFAST_ATAN2_MAGTHRESH);
if(!x522.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x521.value)))+(x522.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x523=IKsin(j3);
IkReal x524=IKcos(j3);
IkReal x525=(cj4*cj5);
IkReal x526=(r12*sj4);
IkReal x527=(cj5*r10);
IkReal x528=((1.0)*x524);
IkReal x529=(r11*x523);
IkReal x530=((1.0)*x523);
IkReal x531=(sj5*x524);
IkReal x532=(cj4*sj5*x523);
evalcond[0]=(((r20*x532))+(((-1.0)*r22*sj4*x530))+((r21*x523*x525))+(((-1.0)*cj5*r20*x528))+((r21*x531)));
evalcond[1]=(((r01*x523*x525))+(((-1.0)*cj5*r00*x528))+(((-1.0)*r02*sj4*x530))+((r01*x531))+((r00*x532)));
evalcond[2]=((1.0)+(((-1.0)*x526*x530))+(((-1.0)*x527*x528))+((r11*x531))+((r10*x532))+((x525*x529)));
evalcond[3]=((((-1.0)*cj4*r10*sj5*x528))+(((-1.0)*x527*x530))+((sj5*x529))+((x524*x526))+(((-1.0)*r11*x525*x528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x533=((12.0)*pz);
IkReal x534=((4.0)*pz);
IkReal x535=((0.176)*sj4);
IkReal x536=(r00*sj5);
IkReal x537=(cj5*sj4);
IkReal x538=((0.016)*cj4);
IkReal x539=(cj5*r21);
IkReal x540=(r20*sj5);
IkReal x541=((0.048)*cj4);
IkReal x542=((0.528)*sj4);
IkReal x543=(cj3*r22);
IkReal x544=(r22*sj4);
IkReal x545=(cj4*r02);
IkReal x546=(cj4*r22);
IkReal x547=((2.04)*x546);
IkReal x548=((0.048)*x544);
IkReal x549=((0.528)*x545);
IkReal x550=((0.68)*x546);
IkReal x551=((0.016)*x544);
IkReal x552=((0.528)*cj3*cj4);
IkReal x553=((0.176)*cj3*cj4);
IkReal x554=(cj5*r20*sj3);
IkReal x555=(r21*sj3*sj5);
IkReal x556=((2.04)*sj4*x540);
IkReal x557=(x540*x541);
IkReal x558=((2.04)*r21*x537);
IkReal x559=(x539*x541);
IkReal x560=((0.528)*x554);
IkReal x561=((0.528)*r01*x537);
IkReal x562=(x536*x542);
IkReal x563=((0.68)*sj4*x540);
IkReal x564=(x538*x540);
IkReal x565=(x538*x539);
IkReal x566=((0.68)*r21*x537);
IkReal x567=(x539*x552);
IkReal x568=(x540*x552);
IkReal x569=(x548+x533);
IkReal x570=(x551+x534);
IkReal x571=(x549+x562+x561);
IkReal x572=((((0.528)*x555))+((x542*x543))+x569);
IkReal x573=(x568+x567+x560);
IkReal x574=(x559+x558+x557+x556+x547);
IkReal x575=((-0.48)+x550+x566+x564+x565+x563);
j1eval[0]=((IKabs(((-0.48)+(((-1.0)*x572))+x574+x573)))+(IKabs(((0.48)+(((-1.0)*x572))+x574+x573)))+(IKabs(((0.48)+x574+x571+(((-1.0)*x569)))))+(IKabs(((((0.176)*x554))+((x540*x553))+(((-1.0)*x570))+x575+(((-1.0)*x535*x543))+(((-0.176)*x555))+((x539*x553)))))+(IKabs(((((0.176)*x545))+(((-1.0)*x570))+x575+((x535*x536))+((cj5*r01*x535)))))+(IKabs(((-0.48)+x574+x571+(((-1.0)*x569))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x576=(cj5*sj4);
IkReal x577=((0.016)*cj4);
IkReal x578=(cj5*r21);
IkReal x579=(r20*sj5);
IkReal x580=((0.048)*cj4);
IkReal x581=(cj4*r02);
IkReal x582=(r22*sj4);
IkReal x583=(cj4*r22);
IkReal x584=((2.04)*x583);
IkReal x585=((0.528)*x581);
IkReal x586=((0.68)*x583);
IkReal x587=((0.176)*x581);
IkReal x588=(sj4*x579);
IkReal x589=(r00*sj4*sj5);
IkReal x590=((0.528)*r01*x576);
IkReal x591=((2.04)*x588);
IkReal x592=(x579*x580);
IkReal x593=((2.04)*r21*x576);
IkReal x594=((0.528)*x589);
IkReal x595=(x578*x580);
IkReal x596=((0.68)*x588);
IkReal x597=(x577*x579);
IkReal x598=((0.176)*r01*x576);
IkReal x599=(x577*x578);
IkReal x600=((0.68)*r21*x576);
IkReal x601=((0.176)*x589);
IkReal x602=((((12.0)*pz))+(((0.048)*x582)));
IkReal x603=((((4.0)*pz))+(((0.016)*x582)));
IkReal x604=(x584+x585+x595+x594+x593+x592+x591+x590);
IkReal x605=(x586+x587+x597+x596+x599+x598+x601+x600);
op[0]=((-0.48)+x605+(((-1.0)*x603)));
op[1]=0;
op[2]=((-0.48)+x604+(((-1.0)*x602)));
op[3]=0;
op[4]=((0.48)+x604+(((-1.0)*x602)));
op[5]=0;
op[6]=((0.48)+x605+(((-1.0)*x603)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x606=((0.016)*cj4);
IkReal x607=(cj5*r21);
IkReal x608=(r20*sj5);
IkReal x609=((0.048)*cj4);
IkReal x610=((0.68)*sj4);
IkReal x611=((0.176)*cj3);
IkReal x612=(r22*sj4);
IkReal x613=((2.04)*sj4);
IkReal x614=(cj4*r22);
IkReal x615=((0.68)*x614);
IkReal x616=((2.04)*x614);
IkReal x617=((0.528)*cj3*cj4);
IkReal x618=(cj5*r20*sj3);
IkReal x619=(r21*sj3*sj5);
IkReal x620=((0.176)*x618);
IkReal x621=(x608*x610);
IkReal x622=(x606*x608);
IkReal x623=(x608*x613);
IkReal x624=(x608*x609);
IkReal x625=(x607*x613);
IkReal x626=((0.528)*x618);
IkReal x627=(x607*x609);
IkReal x628=(x606*x607);
IkReal x629=(x607*x610);
IkReal x630=(cj4*x608*x611);
IkReal x631=(cj4*x607*x611);
IkReal x632=(x607*x617);
IkReal x633=(x608*x617);
IkReal x634=((((0.528)*x619))+(((12.0)*pz))+(((0.528)*cj3*x612))+(((0.048)*x612)));
IkReal x635=((((4.0)*pz))+(((0.016)*x612))+((x611*x612))+(((0.176)*x619)));
IkReal x636=(x615+x621+x620+x622+x629+x628+x630+x631);
IkReal x637=(x616+x625+x624+x627+x626+x623+x632+x633);
j1evalpoly[0]=((0.48)+(((htj1*htj1*htj1*htj1)*(((-0.48)+(((-1.0)*x634))+x637))))+(((-1.0)*x635))+x636+(((htj1*htj1)*(((0.48)+(((-1.0)*x634))+x637))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.48)+(((-1.0)*x635))+x636)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x638=(cj4*r22);
IkReal x639=(cj5*sj4);
IkReal x640=((1.0)*sj1);
IkReal x641=(cj4*r02);
IkReal x642=(sj4*sj5);
if( IKabs(((((-1.0)*x640*x641))+(((-1.0)*r00*x640*x642))+(((-1.0)*r01*x639*x640))+((cj1*r21*x639))+((cj1*r20*x642))+((cj1*x638)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x642))+((cj1*r01*x639))+((cj1*x641))+((r21*sj1*x639))+((sj1*x638))+((cj1*r00*x642)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x640*x641))+(((-1.0)*r00*x640*x642))+(((-1.0)*r01*x639*x640))+((cj1*r21*x639))+((cj1*r20*x642))+((cj1*x638))))+IKsqr((((r20*sj1*x642))+((cj1*r01*x639))+((cj1*x641))+((r21*sj1*x639))+((sj1*x638))+((cj1*r00*x642))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x640*x641))+(((-1.0)*r00*x640*x642))+(((-1.0)*r01*x639*x640))+((cj1*r21*x639))+((cj1*r20*x642))+((cj1*x638))), (((r20*sj1*x642))+((cj1*r01*x639))+((cj1*x641))+((r21*sj1*x639))+((sj1*x638))+((cj1*r00*x642))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x643=IKcos(j2);
IkReal x644=IKsin(j2);
IkReal x645=(r02*sj4);
IkReal x646=((1.0)*cj5);
IkReal x647=(cj4*r01);
IkReal x648=((0.004)*cj5);
IkReal x649=((0.17)*sj1);
IkReal x650=(cj4*r21);
IkReal x651=(sj3*sj5);
IkReal x652=((1.0)*sj5);
IkReal x653=(cj4*r20);
IkReal x654=((1.0)*cj4);
IkReal x655=((0.004)*sj5);
IkReal x656=(r22*sj4);
IkReal x657=(cj4*r00);
IkReal x658=(cj1*x643);
IkReal x659=(cj1*x644);
IkReal x660=(sj1*x643);
IkReal x661=(sj1*x644);
IkReal x662=((1.0)*x661);
evalcond[0]=((((-1.0)*r20*sj4*x652))+(((-1.0)*r22*x654))+(((-1.0)*r21*sj4*x646))+x659+x660);
evalcond[1]=((((-1.0)*r00*sj4*x652))+(((-1.0)*r01*sj4*x646))+(((-1.0)*x662))+(((-1.0)*r02*x654))+x658);
evalcond[2]=((((-1.0)*cj3*x652*x653))+(((-1.0)*cj3*x646*x650))+((cj3*x656))+(((-1.0)*x662))+x658+(((-1.0)*r20*sj3*x646))+((r21*x651)));
evalcond[3]=((((-1.0)*cj3*x652*x657))+(((-1.0)*cj3*x646*x647))+(((-1.0)*x659))+(((-1.0)*x660))+((cj3*x645))+(((-1.0)*r00*sj3*x646))+((r01*x651)));
evalcond[4]=((((-0.004)*x656))+((x643*x649))+(((0.044)*x658))+((x653*x655))+((x648*x650))+(((-1.0)*pz))+(((0.17)*x659))+(((0.12)*cj1))+(((-0.044)*x661)));
evalcond[5]=((0.017)+(((-0.12)*sj1))+(((-1.0)*px))+(((-1.0)*x644*x649))+(((0.17)*x658))+(((-0.044)*x659))+((x655*x657))+(((-0.044)*x660))+(((-0.004)*x645))+((x647*x648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x663=((1.0)*sj5);
IkReal x664=((1.0)*cj5);
CheckValue<IkReal> x665 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x664))+((r21*sj5)))),IkReal(((((-1.0)*cj4*r20*x663))+(((-1.0)*cj4*r21*x664))+((r22*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x665.valid){
continue;
}
CheckValue<IkReal> x666=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+(((-1.0)*r00*sj4*x663))+(((-1.0)*r01*sj4*x664)))),-1);
if(!x666.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x665.value)+(((1.5707963267949)*(x666.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x667=IKsin(j3);
IkReal x668=IKcos(j3);
IkReal x669=(cj4*cj5);
IkReal x670=(r12*sj4);
IkReal x671=(cj5*r10);
IkReal x672=((1.0)*x668);
IkReal x673=(r11*x667);
IkReal x674=((1.0)*x667);
IkReal x675=(sj5*x668);
IkReal x676=(cj4*sj5*x667);
evalcond[0]=((((-1.0)*cj5*r20*x672))+(((-1.0)*r22*sj4*x674))+((r21*x675))+((r21*x667*x669))+((r20*x676)));
evalcond[1]=(((r01*x675))+((r00*x676))+(((-1.0)*cj5*r00*x672))+((r01*x667*x669))+(((-1.0)*r02*sj4*x674)));
evalcond[2]=((1.0)+((r10*x676))+((r11*x675))+((x669*x673))+(((-1.0)*x670*x674))+(((-1.0)*x671*x672)));
evalcond[3]=(((sj5*x673))+(((-1.0)*cj4*r10*sj5*x672))+((x668*x670))+(((-1.0)*r11*x669*x672))+(((-1.0)*x671*x674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x677=((12.0)*pz);
IkReal x678=((4.0)*pz);
IkReal x679=((0.176)*sj4);
IkReal x680=(r00*sj5);
IkReal x681=(cj5*sj4);
IkReal x682=((0.016)*cj4);
IkReal x683=(cj5*r21);
IkReal x684=(r20*sj5);
IkReal x685=((0.048)*cj4);
IkReal x686=((0.528)*sj4);
IkReal x687=(cj3*r22);
IkReal x688=(r22*sj4);
IkReal x689=(cj4*r02);
IkReal x690=(cj4*r22);
IkReal x691=((2.04)*x690);
IkReal x692=((0.048)*x688);
IkReal x693=((0.528)*x689);
IkReal x694=((0.68)*x690);
IkReal x695=((0.016)*x688);
IkReal x696=((0.528)*cj3*cj4);
IkReal x697=((0.176)*cj3*cj4);
IkReal x698=(cj5*r20*sj3);
IkReal x699=(r21*sj3*sj5);
IkReal x700=((2.04)*sj4*x684);
IkReal x701=(x684*x685);
IkReal x702=((2.04)*r21*x681);
IkReal x703=(x683*x685);
IkReal x704=((0.528)*x698);
IkReal x705=((0.528)*r01*x681);
IkReal x706=(x680*x686);
IkReal x707=((0.68)*sj4*x684);
IkReal x708=(x682*x684);
IkReal x709=(x682*x683);
IkReal x710=((0.68)*r21*x681);
IkReal x711=(x683*x696);
IkReal x712=(x684*x696);
IkReal x713=(x677+x692);
IkReal x714=(x678+x695);
IkReal x715=(x693+x706+x705);
IkReal x716=(((x686*x687))+(((0.528)*x699))+x713);
IkReal x717=(x711+x712+x704);
IkReal x718=(x691+x702+x703+x700+x701);
IkReal x719=((-0.48)+x694+x710+x708+x709+x707);
j1eval[0]=((IKabs(((-0.48)+(((-1.0)*x713))+x718+x715)))+(IKabs(((-0.48)+(((-1.0)*x716))+x718+x717)))+(IKabs(((0.48)+(((-1.0)*x716))+x718+x717)))+(IKabs(((0.48)+(((-1.0)*x713))+x718+x715)))+(IKabs((((x679*x680))+(((-1.0)*x714))+x719+(((0.176)*x689))+((cj5*r01*x679)))))+(IKabs((((x684*x697))+(((-1.0)*x679*x687))+(((-0.176)*x699))+(((0.176)*x698))+(((-1.0)*x714))+x719+((x683*x697))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x720=(cj5*sj4);
IkReal x721=((0.016)*cj4);
IkReal x722=(cj5*r21);
IkReal x723=(r20*sj5);
IkReal x724=((0.048)*cj4);
IkReal x725=(cj4*r02);
IkReal x726=(r22*sj4);
IkReal x727=(cj4*r22);
IkReal x728=((2.04)*x727);
IkReal x729=((0.528)*x725);
IkReal x730=((0.68)*x727);
IkReal x731=((0.176)*x725);
IkReal x732=(sj4*x723);
IkReal x733=(r00*sj4*sj5);
IkReal x734=((0.528)*r01*x720);
IkReal x735=((2.04)*x732);
IkReal x736=(x723*x724);
IkReal x737=((2.04)*r21*x720);
IkReal x738=((0.528)*x733);
IkReal x739=(x722*x724);
IkReal x740=((0.68)*x732);
IkReal x741=(x721*x723);
IkReal x742=((0.176)*r01*x720);
IkReal x743=(x721*x722);
IkReal x744=((0.68)*r21*x720);
IkReal x745=((0.176)*x733);
IkReal x746=((((12.0)*pz))+(((0.048)*x726)));
IkReal x747=((((4.0)*pz))+(((0.016)*x726)));
IkReal x748=(x737+x736+x735+x734+x739+x738+x728+x729);
IkReal x749=(x731+x730+x744+x745+x742+x743+x740+x741);
op[0]=((-0.48)+x749+(((-1.0)*x747)));
op[1]=0;
op[2]=((-0.48)+x748+(((-1.0)*x746)));
op[3]=0;
op[4]=((0.48)+x748+(((-1.0)*x746)));
op[5]=0;
op[6]=((0.48)+x749+(((-1.0)*x747)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x750=((0.016)*cj4);
IkReal x751=(cj5*r21);
IkReal x752=(r20*sj5);
IkReal x753=((0.048)*cj4);
IkReal x754=((0.68)*sj4);
IkReal x755=((0.176)*cj3);
IkReal x756=(r22*sj4);
IkReal x757=((2.04)*sj4);
IkReal x758=(cj4*r22);
IkReal x759=((0.68)*x758);
IkReal x760=((2.04)*x758);
IkReal x761=((0.528)*cj3*cj4);
IkReal x762=(cj5*r20*sj3);
IkReal x763=(r21*sj3*sj5);
IkReal x764=((0.176)*x762);
IkReal x765=(x752*x754);
IkReal x766=(x750*x752);
IkReal x767=(x752*x757);
IkReal x768=(x752*x753);
IkReal x769=(x751*x757);
IkReal x770=((0.528)*x762);
IkReal x771=(x751*x753);
IkReal x772=(x750*x751);
IkReal x773=(x751*x754);
IkReal x774=(cj4*x752*x755);
IkReal x775=(cj4*x751*x755);
IkReal x776=(x751*x761);
IkReal x777=(x752*x761);
IkReal x778=((((12.0)*pz))+(((0.528)*x763))+(((0.528)*cj3*x756))+(((0.048)*x756)));
IkReal x779=((((0.176)*x763))+(((4.0)*pz))+((x755*x756))+(((0.016)*x756)));
IkReal x780=(x759+x773+x772+x775+x774+x764+x765+x766);
IkReal x781=(x771+x770+x777+x776+x768+x769+x767+x760);
j1evalpoly[0]=((0.48)+(((htj1*htj1)*(((0.48)+x781+(((-1.0)*x778))))))+(((htj1*htj1*htj1*htj1)*(((-0.48)+x781+(((-1.0)*x778))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.48)+x780+(((-1.0)*x779))))))+x780+(((-1.0)*x779)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x782=(cj4*r22);
IkReal x783=(cj5*sj4);
IkReal x784=((1.0)*sj1);
IkReal x785=(cj4*r02);
IkReal x786=(sj4*sj5);
if( IKabs((((cj1*r20*x786))+((cj1*r21*x783))+((cj1*x782))+(((-1.0)*x784*x785))+(((-1.0)*r00*x784*x786))+(((-1.0)*r01*x783*x784)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01*x783))+((cj1*x785))+((sj1*x782))+((r21*sj1*x783))+((r20*sj1*x786))+((cj1*r00*x786)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x786))+((cj1*r21*x783))+((cj1*x782))+(((-1.0)*x784*x785))+(((-1.0)*r00*x784*x786))+(((-1.0)*r01*x783*x784))))+IKsqr((((cj1*r01*x783))+((cj1*x785))+((sj1*x782))+((r21*sj1*x783))+((r20*sj1*x786))+((cj1*r00*x786))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x786))+((cj1*r21*x783))+((cj1*x782))+(((-1.0)*x784*x785))+(((-1.0)*r00*x784*x786))+(((-1.0)*r01*x783*x784))), (((cj1*r01*x783))+((cj1*x785))+((sj1*x782))+((r21*sj1*x783))+((r20*sj1*x786))+((cj1*r00*x786))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x787=IKcos(j2);
IkReal x788=IKsin(j2);
IkReal x789=(r02*sj4);
IkReal x790=((1.0)*cj5);
IkReal x791=(cj4*r01);
IkReal x792=((0.004)*cj5);
IkReal x793=((0.17)*sj1);
IkReal x794=(cj4*r21);
IkReal x795=(sj3*sj5);
IkReal x796=((1.0)*sj5);
IkReal x797=(cj4*r20);
IkReal x798=((1.0)*cj4);
IkReal x799=((0.004)*sj5);
IkReal x800=(r22*sj4);
IkReal x801=(cj4*r00);
IkReal x802=(cj1*x787);
IkReal x803=(cj1*x788);
IkReal x804=(sj1*x787);
IkReal x805=(sj1*x788);
IkReal x806=((1.0)*x805);
evalcond[0]=((((-1.0)*r21*sj4*x790))+(((-1.0)*r22*x798))+x804+x803+(((-1.0)*r20*sj4*x796)));
evalcond[1]=((((-1.0)*r01*sj4*x790))+(((-1.0)*r00*sj4*x796))+x802+(((-1.0)*x806))+(((-1.0)*r02*x798)));
evalcond[2]=((((-1.0)*r20*sj3*x790))+((cj3*x800))+((r21*x795))+(((-1.0)*cj3*x796*x797))+(((-1.0)*cj3*x790*x794))+x802+(((-1.0)*x806)));
evalcond[3]=((((-1.0)*x803))+(((-1.0)*x804))+((r01*x795))+(((-1.0)*cj3*x796*x801))+(((-1.0)*cj3*x790*x791))+(((-1.0)*r00*sj3*x790))+((cj3*x789)));
evalcond[4]=((((0.044)*x802))+(((0.17)*x803))+((x787*x793))+(((-0.044)*x805))+(((-0.004)*x800))+(((-1.0)*pz))+((x792*x794))+(((0.12)*cj1))+((x797*x799)));
evalcond[5]=((0.017)+(((-0.12)*sj1))+(((0.17)*x802))+(((-1.0)*x788*x793))+(((-0.044)*x803))+(((-0.044)*x804))+(((-1.0)*px))+((x799*x801))+(((-0.004)*x789))+((x791*x792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x807=((1.0)*r00);
CheckValue<IkReal> x808=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x808.valid){
continue;
}
CheckValue<IkReal> x809 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x807))+((r01*sj5)))),IkReal(((((-1.0)*cj4*cj5*r01))+((r02*sj4))+(((-1.0)*cj4*sj5*x807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x809.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x808.value)))+(x809.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x810=IKsin(j3);
IkReal x811=IKcos(j3);
IkReal x812=(cj4*cj5);
IkReal x813=(r12*sj4);
IkReal x814=(cj5*r10);
IkReal x815=((1.0)*x811);
IkReal x816=(r11*x810);
IkReal x817=((1.0)*x810);
IkReal x818=(sj5*x811);
IkReal x819=(cj4*sj5*x810);
evalcond[0]=((((-1.0)*r22*sj4*x817))+((r20*x819))+((r21*x810*x812))+(((-1.0)*cj5*r20*x815))+((r21*x818)));
evalcond[1]=((((-1.0)*r02*sj4*x817))+((r01*x810*x812))+((r01*x818))+((r00*x819))+(((-1.0)*cj5*r00*x815)));
evalcond[2]=((1.0)+((r11*x818))+((x812*x816))+((r10*x819))+(((-1.0)*x814*x815))+(((-1.0)*x813*x817)));
evalcond[3]=((((-1.0)*cj4*r10*sj5*x815))+((sj5*x816))+(((-1.0)*r11*x812*x815))+(((-1.0)*x814*x817))+((x811*x813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x820=((12.0)*pz);
IkReal x821=((4.0)*pz);
IkReal x822=((0.176)*sj4);
IkReal x823=(r00*sj5);
IkReal x824=(cj5*sj4);
IkReal x825=((0.016)*cj4);
IkReal x826=(cj5*r21);
IkReal x827=(r20*sj5);
IkReal x828=((0.048)*cj4);
IkReal x829=((0.528)*sj4);
IkReal x830=(cj3*r22);
IkReal x831=(r22*sj4);
IkReal x832=(cj4*r02);
IkReal x833=(cj4*r22);
IkReal x834=((2.04)*x833);
IkReal x835=((0.048)*x831);
IkReal x836=((0.528)*x832);
IkReal x837=((0.68)*x833);
IkReal x838=((0.016)*x831);
IkReal x839=((0.528)*cj3*cj4);
IkReal x840=((0.176)*cj3*cj4);
IkReal x841=(cj5*r20*sj3);
IkReal x842=(r21*sj3*sj5);
IkReal x843=((2.04)*sj4*x827);
IkReal x844=(x827*x828);
IkReal x845=((2.04)*r21*x824);
IkReal x846=(x826*x828);
IkReal x847=((0.528)*x841);
IkReal x848=((0.528)*r01*x824);
IkReal x849=(x823*x829);
IkReal x850=((0.68)*sj4*x827);
IkReal x851=(x825*x827);
IkReal x852=(x825*x826);
IkReal x853=((0.68)*r21*x824);
IkReal x854=(x826*x839);
IkReal x855=(x827*x839);
IkReal x856=(x820+x835);
IkReal x857=(x821+x838);
IkReal x858=(x836+x849+x848);
IkReal x859=(((x829*x830))+x856+(((0.528)*x842)));
IkReal x860=(x854+x855+x847);
IkReal x861=(x834+x843+x845+x844+x846);
IkReal x862=((-0.48)+x852+x853+x850+x851+x837);
j1eval[0]=((IKabs(((-0.48)+(((-1.0)*x856))+x858+x861)))+(IKabs(((0.48)+(((-1.0)*x859))+x861+x860)))+(IKabs(((((-1.0)*x857))+((cj5*r01*x822))+(((0.176)*x832))+((x822*x823))+x862)))+(IKabs(((0.48)+(((-1.0)*x856))+x858+x861)))+(IKabs(((((-0.176)*x842))+(((-1.0)*x857))+((x826*x840))+(((0.176)*x841))+(((-1.0)*x822*x830))+((x827*x840))+x862)))+(IKabs(((-0.48)+(((-1.0)*x859))+x861+x860))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x863=(cj5*sj4);
IkReal x864=((0.016)*cj4);
IkReal x865=(cj5*r21);
IkReal x866=(r20*sj5);
IkReal x867=((0.048)*cj4);
IkReal x868=(cj4*r02);
IkReal x869=(r22*sj4);
IkReal x870=(cj4*r22);
IkReal x871=((2.04)*x870);
IkReal x872=((0.528)*x868);
IkReal x873=((0.68)*x870);
IkReal x874=((0.176)*x868);
IkReal x875=(sj4*x866);
IkReal x876=(r00*sj4*sj5);
IkReal x877=((0.528)*r01*x863);
IkReal x878=((2.04)*x875);
IkReal x879=(x866*x867);
IkReal x880=((2.04)*r21*x863);
IkReal x881=((0.528)*x876);
IkReal x882=(x865*x867);
IkReal x883=((0.68)*x875);
IkReal x884=(x864*x866);
IkReal x885=((0.176)*r01*x863);
IkReal x886=(x864*x865);
IkReal x887=((0.68)*r21*x863);
IkReal x888=((0.176)*x876);
IkReal x889=((((12.0)*pz))+(((0.048)*x869)));
IkReal x890=((((0.016)*x869))+(((4.0)*pz)));
IkReal x891=(x878+x879+x871+x872+x877+x881+x880+x882);
IkReal x892=(x873+x874+x885+x884+x887+x886+x883+x888);
op[0]=((-0.48)+(((-1.0)*x890))+x892);
op[1]=0;
op[2]=((-0.48)+(((-1.0)*x889))+x891);
op[3]=0;
op[4]=((0.48)+(((-1.0)*x889))+x891);
op[5]=0;
op[6]=((0.48)+(((-1.0)*x890))+x892);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x893=((0.016)*cj4);
IkReal x894=(cj5*r21);
IkReal x895=(r20*sj5);
IkReal x896=((0.048)*cj4);
IkReal x897=((0.68)*sj4);
IkReal x898=((0.176)*cj3);
IkReal x899=(r22*sj4);
IkReal x900=((2.04)*sj4);
IkReal x901=(cj4*r22);
IkReal x902=((0.68)*x901);
IkReal x903=((2.04)*x901);
IkReal x904=((0.528)*cj3*cj4);
IkReal x905=(cj5*r20*sj3);
IkReal x906=(r21*sj3*sj5);
IkReal x907=((0.176)*x905);
IkReal x908=(x895*x897);
IkReal x909=(x893*x895);
IkReal x910=(x895*x900);
IkReal x911=(x895*x896);
IkReal x912=(x894*x900);
IkReal x913=((0.528)*x905);
IkReal x914=(x894*x896);
IkReal x915=(x893*x894);
IkReal x916=(x894*x897);
IkReal x917=(cj4*x895*x898);
IkReal x918=(cj4*x894*x898);
IkReal x919=(x894*x904);
IkReal x920=(x895*x904);
IkReal x921=((((12.0)*pz))+(((0.048)*x899))+(((0.528)*x906))+(((0.528)*cj3*x899)));
IkReal x922=(((x898*x899))+(((4.0)*pz))+(((0.016)*x899))+(((0.176)*x906)));
IkReal x923=(x918+x917+x916+x915+x907+x902+x908+x909);
IkReal x924=(x920+x919+x913+x912+x911+x910+x914+x903);
j1evalpoly[0]=((0.48)+(((htj1*htj1*htj1*htj1)*(((-0.48)+(((-1.0)*x921))+x924))))+(((-1.0)*x922))+(((htj1*htj1)*(((0.48)+(((-1.0)*x921))+x924))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.48)+(((-1.0)*x922))+x923))))+x923);
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x925=(cj4*r22);
IkReal x926=(cj5*sj4);
IkReal x927=((1.0)*sj1);
IkReal x928=(cj4*r02);
IkReal x929=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x926*x927))+(((-1.0)*x927*x928))+((cj1*r20*x929))+(((-1.0)*r00*x927*x929))+((cj1*r21*x926))+((cj1*x925)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x929))+((sj1*x925))+((cj1*r00*x929))+((cj1*r01*x926))+((cj1*x928))+((r21*sj1*x926)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x926*x927))+(((-1.0)*x927*x928))+((cj1*r20*x929))+(((-1.0)*r00*x927*x929))+((cj1*r21*x926))+((cj1*x925))))+IKsqr((((r20*sj1*x929))+((sj1*x925))+((cj1*r00*x929))+((cj1*r01*x926))+((cj1*x928))+((r21*sj1*x926))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x926*x927))+(((-1.0)*x927*x928))+((cj1*r20*x929))+(((-1.0)*r00*x927*x929))+((cj1*r21*x926))+((cj1*x925))), (((r20*sj1*x929))+((sj1*x925))+((cj1*r00*x929))+((cj1*r01*x926))+((cj1*x928))+((r21*sj1*x926))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x930=IKcos(j2);
IkReal x931=IKsin(j2);
IkReal x932=(r02*sj4);
IkReal x933=((1.0)*cj5);
IkReal x934=(cj4*r01);
IkReal x935=((0.004)*cj5);
IkReal x936=((0.17)*sj1);
IkReal x937=(cj4*r21);
IkReal x938=(sj3*sj5);
IkReal x939=((1.0)*sj5);
IkReal x940=(cj4*r20);
IkReal x941=((1.0)*cj4);
IkReal x942=((0.004)*sj5);
IkReal x943=(r22*sj4);
IkReal x944=(cj4*r00);
IkReal x945=(cj1*x930);
IkReal x946=(cj1*x931);
IkReal x947=(sj1*x930);
IkReal x948=(sj1*x931);
IkReal x949=((1.0)*x948);
evalcond[0]=((((-1.0)*r20*sj4*x939))+(((-1.0)*r21*sj4*x933))+(((-1.0)*r22*x941))+x946+x947);
evalcond[1]=((((-1.0)*r02*x941))+(((-1.0)*x949))+(((-1.0)*r01*sj4*x933))+x945+(((-1.0)*r00*sj4*x939)));
evalcond[2]=((((-1.0)*x949))+((r21*x938))+((cj3*x943))+(((-1.0)*r20*sj3*x933))+(((-1.0)*cj3*x933*x937))+(((-1.0)*cj3*x939*x940))+x945);
evalcond[3]=((((-1.0)*x946))+(((-1.0)*x947))+((cj3*x932))+((r01*x938))+(((-1.0)*cj3*x933*x934))+(((-1.0)*cj3*x939*x944))+(((-1.0)*r00*sj3*x933)));
evalcond[4]=((((0.17)*x946))+(((0.044)*x945))+(((-0.004)*x943))+((x935*x937))+(((-1.0)*pz))+((x930*x936))+(((-0.044)*x948))+(((0.12)*cj1))+((x940*x942)));
evalcond[5]=((0.017)+(((0.17)*x945))+(((-0.12)*sj1))+(((-1.0)*x931*x936))+(((-0.004)*x932))+(((-1.0)*px))+((x942*x944))+(((-0.044)*x946))+(((-0.044)*x947))+((x934*x935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x950=((1.0)*cj5);
IkReal x951=(((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)));
j3eval[0]=x951;
j3eval[1]=IKsign(x951);
j3eval[2]=((IKabs(((((-1.0)*r10*x950))+((r11*sj5)))))+(IKabs(((((-1.0)*cj4*r11*x950))+(((-1.0)*cj4*r10*sj5))+((r12*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x952=((1.0)*sj5);
IkReal x953=((1.0)*cj5);
IkReal x954=((((-1.0)*r11*sj4*x953))+(((-1.0)*r10*sj4*x952))+(((-1.0)*cj4*r12)));
j3eval[0]=x954;
j3eval[1]=((IKabs((((r22*sj4))+(((-1.0)*cj4*r20*x952))+(((-1.0)*cj4*r21*x953)))))+(IKabs(((((-1.0)*r20*x953))+((r21*sj5))))));
j3eval[2]=IKsign(x954);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x955=cj5*cj5;
IkReal x956=cj4*cj4;
IkReal x957=r00*r00;
IkReal x958=r01*r01;
IkReal x959=r02*r02;
IkReal x960=(r00*sj5);
IkReal x961=((1.0)*r01);
IkReal x962=((2.0)*cj5*r01);
IkReal x963=(cj4*r02*sj4);
IkReal x964=((1.0)*x958);
IkReal x965=(x955*x957);
IkReal x966=(((x955*x958))+(((-1.0)*x956*x960*x962))+(((-1.0)*x955*x956*x964))+((x962*x963))+(((-1.0)*x965))+(((-1.0)*x956*x957))+(((-1.0)*x959))+((x960*x962))+(((2.0)*x960*x963))+((x956*x959))+((x956*x965))+(((-1.0)*x964)));
j3eval[0]=x966;
j3eval[1]=((IKabs(((((-1.0)*cj4*cj5*x961))+((r02*sj4))+(((-1.0)*cj4*x960)))))+(IKabs(((((-1.0)*sj5*x961))+((cj5*r00))))));
j3eval[2]=IKsign(x966);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x967=cj5*cj5;
IkReal x968=cj4*cj4;
IkReal x969=r00*r00;
IkReal x970=r01*r01;
IkReal x971=r02*r02;
IkReal x972=(cj5*r01);
IkReal x973=((1.0)*sj5);
IkReal x974=(r00*sj5);
IkReal x975=((1.0)*x969);
IkReal x976=((2.0)*cj4*r02*sj4);
IkReal x977=(x967*x970);
CheckValue<IkReal> x978=IKPowWithIntegerCheck(IKsign(((((-2.0)*x968*x972*x974))+(((-1.0)*x971))+(((-1.0)*x970))+(((2.0)*x972*x974))+((x967*x968*x969))+(((-1.0)*x968*x977))+((x968*x971))+(((-1.0)*x967*x975))+((x974*x976))+x977+(((-1.0)*x968*x975))+((x972*x976)))),-1);
if(!x978.valid){
continue;
}
CheckValue<IkReal> x979 = IKatan2WithCheck(IkReal((((r02*sj4))+(((-1.0)*cj4*x972))+(((-1.0)*cj4*r00*x973)))),IkReal(((((-1.0)*r01*x973))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x979.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x978.value)))+(x979.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x980=IKsin(j3);
IkReal x981=IKcos(j3);
IkReal x982=(cj4*cj5);
IkReal x983=(cj5*r00);
IkReal x984=(r02*sj4);
IkReal x985=((1.0)*x981);
IkReal x986=(r01*x980);
IkReal x987=((1.0)*x980);
IkReal x988=(sj5*x981);
IkReal x989=(cj4*sj5*x980);
evalcond[0]=(((r21*x988))+(((-1.0)*cj5*r20*x985))+((r21*x980*x982))+((r20*x989))+(((-1.0)*r22*sj4*x987)));
evalcond[1]=((((-1.0)*cj5*r10*x985))+((r11*x988))+((r10*x989))+((r11*x980*x982))+(((-1.0)*r12*sj4*x987)));
evalcond[2]=((-1.0)+((r00*x989))+((r01*x988))+((x982*x986))+(((-1.0)*x984*x987))+(((-1.0)*x983*x985)));
evalcond[3]=(((x981*x984))+(((-1.0)*cj4*r00*sj5*x985))+(((-1.0)*r01*x982*x985))+((sj5*x986))+(((-1.0)*x983*x987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=1.0;
j0=0;
IkReal x990=(cj4*r22);
IkReal x991=((0.016)*cj4);
IkReal x992=(cj5*r21);
IkReal x993=(r20*sj5);
IkReal x994=(cj5*r11);
IkReal x995=((2.04)*sj4);
IkReal x996=((0.176)*sj4);
IkReal x997=((0.528)*sj4);
IkReal x998=((0.048)*cj4);
IkReal x999=((0.68)*sj4);
IkReal x1000=(r12*sj4);
IkReal x1001=(cj4*r12);
IkReal x1002=(r10*sj5);
IkReal x1003=(r22*sj4);
IkReal x1004=((2.04)*x990);
IkReal x1005=((0.528)*x1001);
IkReal x1006=(x993*x995);
IkReal x1007=(x993*x998);
IkReal x1008=(x992*x995);
IkReal x1009=(x994*x997);
IkReal x1010=(x992*x998);
IkReal x1011=(x1002*x997);
IkReal x1012=((((12.0)*pz))+(((0.048)*x1003)));
IkReal x1013=(x1010+x1011+x1009+x1008+x1007+x1006+x1005+x1004);
j1eval[0]=((3.84)+(IKabs(((-0.48)+((x993*x999))+((x994*x996))+((x991*x992))+((x991*x993))+((x992*x999))+(((-0.016)*x1003))+(((0.68)*x990))+(((0.176)*x1001))+((x1002*x996))+(((-4.0)*pz)))))+(((2.0)*(IKabs(((0.204)+((x994*x998))+((x994*x995))+(((-12.0)*py))+(((2.04)*x1001))+(((-1.0)*x992*x997))+(((-0.048)*x1000))+((x1002*x998))+((x1002*x995))+(((-1.0)*x993*x997))+(((-0.528)*x990)))))))+(IKabs(((-0.48)+x1013+(((-1.0)*x1012)))))+(IKabs(((0.48)+x1013+(((-1.0)*x1012)))))+(IKabs(((0.068)+((x994*x999))+(((0.68)*x1001))+((x991*x994))+(((-0.016)*x1000))+(((-1.0)*x992*x996))+((x1002*x999))+((x1002*x991))+(((-0.176)*x990))+(((-1.0)*x993*x996))+(((-4.0)*py))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1014=((0.016)*cj4);
IkReal x1015=(cj5*r21);
IkReal x1016=(r20*sj5);
IkReal x1017=((0.048)*cj4);
IkReal x1018=(cj4*r12);
IkReal x1019=(cj4*r22);
IkReal x1020=(r22*sj4);
IkReal x1021=((2.04)*x1019);
IkReal x1022=((0.528)*x1018);
IkReal x1023=((0.68)*x1019);
IkReal x1024=((0.176)*x1018);
IkReal x1025=(sj4*x1016);
IkReal x1026=(r10*sj4*sj5);
IkReal x1027=(cj5*r11*sj4);
IkReal x1028=((2.04)*x1025);
IkReal x1029=(x1016*x1017);
IkReal x1030=((2.04)*sj4*x1015);
IkReal x1031=((0.528)*x1027);
IkReal x1032=(x1015*x1017);
IkReal x1033=((0.528)*x1026);
IkReal x1034=((0.68)*x1025);
IkReal x1035=(x1014*x1016);
IkReal x1036=((0.176)*x1027);
IkReal x1037=(x1014*x1015);
IkReal x1038=((0.176)*x1026);
IkReal x1039=((0.68)*sj4*x1015);
IkReal x1040=((((12.0)*pz))+(((0.048)*x1020)));
IkReal x1041=((((0.016)*x1020))+(((4.0)*pz)));
IkReal x1042=(x1038+x1039+x1036+x1037+x1034+x1035+x1024+x1023);
IkReal x1043=(x1032+x1033+x1030+x1031+x1021+x1022+x1029+x1028);
op[0]=((-0.48)+x1042+(((-1.0)*x1041)));
op[1]=0;
op[2]=((-0.48)+x1043+(((-1.0)*x1040)));
op[3]=0;
op[4]=((0.48)+x1043+(((-1.0)*x1040)));
op[5]=0;
op[6]=((0.48)+x1042+(((-1.0)*x1041)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1044=((4.0)*py);
IkReal x1045=(cj4*r22);
IkReal x1046=(cj5*sj4);
IkReal x1047=(r12*sj4);
IkReal x1048=((0.016)*cj4);
IkReal x1049=(r10*sj5);
IkReal x1050=(cj5*r11);
IkReal x1051=((0.048)*cj4);
IkReal x1052=(cj4*r12);
IkReal x1053=((0.68)*x1052);
IkReal x1054=((0.016)*x1047);
IkReal x1055=((0.176)*x1045);
IkReal x1056=(r20*sj4*sj5);
IkReal x1057=(x1048*x1050);
IkReal x1058=((0.68)*r11*x1046);
IkReal x1059=((0.68)*sj4*x1049);
IkReal x1060=(x1048*x1049);
IkReal x1061=((0.176)*x1056);
IkReal x1062=((0.176)*r21*x1046);
IkReal x1063=(x1054+x1055+x1044+x1061+x1062);
IkReal x1064=((0.068)+x1053+x1057+x1058+x1059+x1060);
IkReal x1065=((0.204)+(((-12.0)*py))+(((-0.528)*x1056))+(((2.04)*r11*x1046))+(((-0.528)*x1045))+(((-0.528)*r21*x1046))+((x1050*x1051))+(((2.04)*x1052))+(((-0.048)*x1047))+((x1049*x1051))+(((2.04)*sj4*x1049)));
j1evalpoly[0]=(((x1065*(htj1*htj1*htj1*htj1)))+(((-0.96)*(htj1*htj1*htj1*htj1*htj1)))+x1064+((x1065*(htj1*htj1)))+(((-1.92)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x1064+(((-1.0)*x1063))))))+(((-1.0)*x1063))+(((-0.96)*htj1)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1066=(cj5*sj4);
IkReal x1067=(cj1*cj4);
IkReal x1068=((1.0)*sj1);
IkReal x1069=(sj4*sj5);
if( IKabs(((((-1.0)*r10*x1068*x1069))+(((-1.0)*cj4*r12*x1068))+((cj1*r20*x1069))+((cj1*r21*x1066))+((r22*x1067))+(((-1.0)*r11*x1066*x1068)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x1067))+((r21*sj1*x1066))+((cj1*r11*x1066))+((cj4*r22*sj1))+((cj1*r10*x1069))+((r20*sj1*x1069)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1068*x1069))+(((-1.0)*cj4*r12*x1068))+((cj1*r20*x1069))+((cj1*r21*x1066))+((r22*x1067))+(((-1.0)*r11*x1066*x1068))))+IKsqr((((r12*x1067))+((r21*sj1*x1066))+((cj1*r11*x1066))+((cj4*r22*sj1))+((cj1*r10*x1069))+((r20*sj1*x1069))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x1068*x1069))+(((-1.0)*cj4*r12*x1068))+((cj1*r20*x1069))+((cj1*r21*x1066))+((r22*x1067))+(((-1.0)*r11*x1066*x1068))), (((r12*x1067))+((r21*sj1*x1066))+((cj1*r11*x1066))+((cj4*r22*sj1))+((cj1*r10*x1069))+((r20*sj1*x1069))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1070=IKcos(j2);
IkReal x1071=IKsin(j2);
IkReal x1072=(sj3*sj5);
IkReal x1073=((0.17)*sj1);
IkReal x1074=((0.004)*cj4);
IkReal x1075=(cj5*r21);
IkReal x1076=((1.0)*cj4);
IkReal x1077=((1.0)*sj1);
IkReal x1078=(r12*sj4);
IkReal x1079=(r20*sj5);
IkReal x1080=(cj5*r11);
IkReal x1081=((1.0)*sj4);
IkReal x1082=(r22*sj4);
IkReal x1083=(r10*sj5);
IkReal x1084=(cj1*x1070);
IkReal x1085=((1.0)*cj5*sj3);
IkReal x1086=(cj1*x1071);
IkReal x1087=(sj5*x1081);
IkReal x1088=(sj1*x1070);
IkReal x1089=(x1071*x1077);
evalcond[0]=(x1086+x1088+(((-1.0)*r22*x1076))+(((-1.0)*x1079*x1081))+(((-1.0)*x1075*x1081)));
evalcond[1]=(x1084+(((-1.0)*r12*x1076))+(((-1.0)*x1081*x1083))+(((-1.0)*x1080*x1081))+(((-1.0)*x1089)));
evalcond[2]=(x1084+(((-1.0)*cj3*x1076*x1079))+(((-1.0)*cj3*x1075*x1076))+((cj3*x1082))+((r21*x1072))+(((-1.0)*x1089))+(((-1.0)*r20*x1085)));
evalcond[3]=((((-1.0)*r10*x1085))+(((-1.0)*x1070*x1077))+((cj3*x1078))+(((-1.0)*cj3*x1076*x1080))+(((-1.0)*cj3*x1076*x1083))+(((-1.0)*x1086))+((r11*x1072)));
evalcond[4]=((((0.044)*x1084))+(((-0.044)*sj1*x1071))+((x1074*x1079))+((x1074*x1075))+((x1070*x1073))+(((-1.0)*pz))+(((-0.004)*x1082))+(((0.17)*x1086))+(((0.12)*cj1)));
evalcond[5]=((0.017)+(((-0.12)*sj1))+(((-1.0)*x1071*x1073))+(((-1.0)*py))+(((-0.044)*x1086))+(((-0.044)*x1088))+((x1074*x1083))+((x1074*x1080))+(((0.17)*x1084))+(((-0.004)*x1078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1090=((1.0)*sj5);
IkReal x1091=((1.0)*cj5);
CheckValue<IkReal> x1092=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj4*x1090))+(((-1.0)*r11*sj4*x1091))+(((-1.0)*cj4*r12)))),-1);
if(!x1092.valid){
continue;
}
CheckValue<IkReal> x1093 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x1091)))),IkReal(((((-1.0)*cj4*r20*x1090))+((r22*sj4))+(((-1.0)*cj4*r21*x1091)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1093.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1092.value)))+(x1093.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1094=IKsin(j3);
IkReal x1095=IKcos(j3);
IkReal x1096=(cj4*cj5);
IkReal x1097=(cj5*r00);
IkReal x1098=(r02*sj4);
IkReal x1099=((1.0)*x1095);
IkReal x1100=(r01*x1094);
IkReal x1101=((1.0)*x1094);
IkReal x1102=(sj5*x1095);
IkReal x1103=(cj4*sj5*x1094);
evalcond[0]=(((r20*x1103))+(((-1.0)*cj5*r20*x1099))+(((-1.0)*r22*sj4*x1101))+((r21*x1094*x1096))+((r21*x1102)));
evalcond[1]=(((r11*x1094*x1096))+(((-1.0)*cj5*r10*x1099))+(((-1.0)*r12*sj4*x1101))+((r10*x1103))+((r11*x1102)));
evalcond[2]=((-1.0)+(((-1.0)*x1098*x1101))+(((-1.0)*x1097*x1099))+((r01*x1102))+((r00*x1103))+((x1096*x1100)));
evalcond[3]=((((-1.0)*r01*x1096*x1099))+((x1095*x1098))+(((-1.0)*x1097*x1101))+((sj5*x1100))+(((-1.0)*cj4*r00*sj5*x1099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=1.0;
j0=0;
IkReal x1104=(cj4*r22);
IkReal x1105=((0.016)*cj4);
IkReal x1106=(cj5*r21);
IkReal x1107=(r20*sj5);
IkReal x1108=(cj5*r11);
IkReal x1109=((2.04)*sj4);
IkReal x1110=((0.176)*sj4);
IkReal x1111=((0.528)*sj4);
IkReal x1112=((0.048)*cj4);
IkReal x1113=((0.68)*sj4);
IkReal x1114=(r12*sj4);
IkReal x1115=(cj4*r12);
IkReal x1116=(r10*sj5);
IkReal x1117=(r22*sj4);
IkReal x1118=((2.04)*x1104);
IkReal x1119=((0.528)*x1115);
IkReal x1120=(x1107*x1109);
IkReal x1121=(x1107*x1112);
IkReal x1122=(x1106*x1109);
IkReal x1123=(x1108*x1111);
IkReal x1124=(x1106*x1112);
IkReal x1125=(x1111*x1116);
IkReal x1126=((((12.0)*pz))+(((0.048)*x1117)));
IkReal x1127=(x1119+x1118+x1120+x1121+x1122+x1123+x1124+x1125);
j1eval[0]=((3.84)+(IKabs(((-0.48)+((x1108*x1110))+(((0.176)*x1115))+((x1105*x1106))+((x1105*x1107))+(((0.68)*x1104))+(((-0.016)*x1117))+((x1110*x1116))+(((-4.0)*pz))+((x1107*x1113))+((x1106*x1113)))))+(((2.0)*(IKabs(((0.204)+((x1109*x1116))+((x1108*x1109))+((x1108*x1112))+(((-12.0)*py))+((x1112*x1116))+(((2.04)*x1115))+(((-0.048)*x1114))+(((-1.0)*x1107*x1111))+(((-1.0)*x1106*x1111))+(((-0.528)*x1104)))))))+(IKabs(((0.068)+((x1108*x1113))+(((0.68)*x1115))+((x1113*x1116))+((x1105*x1108))+((x1105*x1116))+(((-0.016)*x1114))+(((-0.176)*x1104))+(((-1.0)*x1107*x1110))+(((-1.0)*x1106*x1110))+(((-4.0)*py)))))+(IKabs(((0.48)+x1127+(((-1.0)*x1126)))))+(IKabs(((-0.48)+x1127+(((-1.0)*x1126))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1128=((0.016)*cj4);
IkReal x1129=(cj5*r21);
IkReal x1130=(r20*sj5);
IkReal x1131=((0.048)*cj4);
IkReal x1132=(cj4*r12);
IkReal x1133=(cj4*r22);
IkReal x1134=(r22*sj4);
IkReal x1135=((2.04)*x1133);
IkReal x1136=((0.528)*x1132);
IkReal x1137=((0.68)*x1133);
IkReal x1138=((0.176)*x1132);
IkReal x1139=(sj4*x1130);
IkReal x1140=(r10*sj4*sj5);
IkReal x1141=(cj5*r11*sj4);
IkReal x1142=((2.04)*x1139);
IkReal x1143=(x1130*x1131);
IkReal x1144=((2.04)*sj4*x1129);
IkReal x1145=((0.528)*x1141);
IkReal x1146=(x1129*x1131);
IkReal x1147=((0.528)*x1140);
IkReal x1148=((0.68)*x1139);
IkReal x1149=(x1128*x1130);
IkReal x1150=((0.176)*x1141);
IkReal x1151=(x1128*x1129);
IkReal x1152=((0.176)*x1140);
IkReal x1153=((0.68)*sj4*x1129);
IkReal x1154=((((12.0)*pz))+(((0.048)*x1134)));
IkReal x1155=((((4.0)*pz))+(((0.016)*x1134)));
IkReal x1156=(x1148+x1149+x1151+x1150+x1153+x1152+x1138+x1137);
IkReal x1157=(x1142+x1143+x1146+x1147+x1144+x1145+x1136+x1135);
op[0]=((-0.48)+x1156+(((-1.0)*x1155)));
op[1]=0;
op[2]=((-0.48)+x1157+(((-1.0)*x1154)));
op[3]=0;
op[4]=((0.48)+x1157+(((-1.0)*x1154)));
op[5]=0;
op[6]=((0.48)+x1156+(((-1.0)*x1155)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1158=((4.0)*py);
IkReal x1159=(cj4*r22);
IkReal x1160=(cj5*sj4);
IkReal x1161=(r12*sj4);
IkReal x1162=((0.016)*cj4);
IkReal x1163=(r10*sj5);
IkReal x1164=(cj5*r11);
IkReal x1165=((0.048)*cj4);
IkReal x1166=(cj4*r12);
IkReal x1167=((0.68)*x1166);
IkReal x1168=((0.016)*x1161);
IkReal x1169=((0.176)*x1159);
IkReal x1170=(r20*sj4*sj5);
IkReal x1171=(x1162*x1164);
IkReal x1172=((0.68)*r11*x1160);
IkReal x1173=((0.68)*sj4*x1163);
IkReal x1174=(x1162*x1163);
IkReal x1175=((0.176)*x1170);
IkReal x1176=((0.176)*r21*x1160);
IkReal x1177=(x1158+x1168+x1169+x1176+x1175);
IkReal x1178=((0.068)+x1167+x1174+x1173+x1172+x1171);
IkReal x1179=((0.204)+((x1164*x1165))+(((-12.0)*py))+((x1163*x1165))+(((-0.048)*x1161))+(((-0.528)*r21*x1160))+(((-0.528)*x1170))+(((2.04)*sj4*x1163))+(((2.04)*r11*x1160))+(((2.04)*x1166))+(((-0.528)*x1159)));
j1evalpoly[0]=(x1178+((x1179*(htj1*htj1)))+(((-0.96)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.92)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x1178+(((-1.0)*x1177))))))+(((-1.0)*x1177))+(((-0.96)*htj1))+((x1179*(htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1180=(cj5*sj4);
IkReal x1181=(cj1*cj4);
IkReal x1182=((1.0)*sj1);
IkReal x1183=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r12*x1182))+(((-1.0)*r10*x1182*x1183))+((r22*x1181))+(((-1.0)*r11*x1180*x1182))+((cj1*r20*x1183))+((cj1*r21*x1180)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r11*x1180))+((r21*sj1*x1180))+((cj4*r22*sj1))+((cj1*r10*x1183))+((r20*sj1*x1183))+((r12*x1181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r12*x1182))+(((-1.0)*r10*x1182*x1183))+((r22*x1181))+(((-1.0)*r11*x1180*x1182))+((cj1*r20*x1183))+((cj1*r21*x1180))))+IKsqr((((cj1*r11*x1180))+((r21*sj1*x1180))+((cj4*r22*sj1))+((cj1*r10*x1183))+((r20*sj1*x1183))+((r12*x1181))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*r12*x1182))+(((-1.0)*r10*x1182*x1183))+((r22*x1181))+(((-1.0)*r11*x1180*x1182))+((cj1*r20*x1183))+((cj1*r21*x1180))), (((cj1*r11*x1180))+((r21*sj1*x1180))+((cj4*r22*sj1))+((cj1*r10*x1183))+((r20*sj1*x1183))+((r12*x1181))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1184=IKcos(j2);
IkReal x1185=IKsin(j2);
IkReal x1186=(sj3*sj5);
IkReal x1187=((0.17)*sj1);
IkReal x1188=((0.004)*cj4);
IkReal x1189=(cj5*r21);
IkReal x1190=((1.0)*cj4);
IkReal x1191=((1.0)*sj1);
IkReal x1192=(r12*sj4);
IkReal x1193=(r20*sj5);
IkReal x1194=(cj5*r11);
IkReal x1195=((1.0)*sj4);
IkReal x1196=(r22*sj4);
IkReal x1197=(r10*sj5);
IkReal x1198=(cj1*x1184);
IkReal x1199=((1.0)*cj5*sj3);
IkReal x1200=(cj1*x1185);
IkReal x1201=(sj5*x1195);
IkReal x1202=(sj1*x1184);
IkReal x1203=(x1185*x1191);
evalcond[0]=((((-1.0)*x1193*x1195))+x1200+x1202+(((-1.0)*x1189*x1195))+(((-1.0)*r22*x1190)));
evalcond[1]=(x1198+(((-1.0)*x1194*x1195))+(((-1.0)*x1195*x1197))+(((-1.0)*x1203))+(((-1.0)*r12*x1190)));
evalcond[2]=((((-1.0)*cj3*x1190*x1193))+x1198+((r21*x1186))+(((-1.0)*cj3*x1189*x1190))+(((-1.0)*x1203))+((cj3*x1196))+(((-1.0)*r20*x1199)));
evalcond[3]=((((-1.0)*cj3*x1190*x1194))+(((-1.0)*cj3*x1190*x1197))+(((-1.0)*r10*x1199))+(((-1.0)*x1184*x1191))+(((-1.0)*x1200))+((r11*x1186))+((cj3*x1192)));
evalcond[4]=(((x1184*x1187))+(((-0.004)*x1196))+((x1188*x1189))+(((-0.044)*sj1*x1185))+((x1188*x1193))+(((0.044)*x1198))+(((-1.0)*pz))+(((0.12)*cj1))+(((0.17)*x1200)));
evalcond[5]=((0.017)+(((-0.12)*sj1))+(((-0.004)*x1192))+((x1188*x1197))+((x1188*x1194))+(((-1.0)*py))+(((-1.0)*x1185*x1187))+(((0.17)*x1198))+(((-0.044)*x1200))+(((-0.044)*x1202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1204=((1.0)*cj5);
CheckValue<IkReal> x1205 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1204))+((r11*sj5)))),IkReal(((((-1.0)*cj4*r10*sj5))+((r12*sj4))+(((-1.0)*cj4*r11*x1204)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1205.valid){
continue;
}
CheckValue<IkReal> x1206=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x1206.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1205.value)+(((1.5707963267949)*(x1206.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1207=IKsin(j3);
IkReal x1208=IKcos(j3);
IkReal x1209=(cj4*cj5);
IkReal x1210=(cj5*r00);
IkReal x1211=(r02*sj4);
IkReal x1212=((1.0)*x1208);
IkReal x1213=(r01*x1207);
IkReal x1214=((1.0)*x1207);
IkReal x1215=(sj5*x1208);
IkReal x1216=(cj4*sj5*x1207);
evalcond[0]=((((-1.0)*r22*sj4*x1214))+(((-1.0)*cj5*r20*x1212))+((r20*x1216))+((r21*x1215))+((r21*x1207*x1209)));
evalcond[1]=(((r11*x1215))+(((-1.0)*cj5*r10*x1212))+((r11*x1207*x1209))+((r10*x1216))+(((-1.0)*r12*sj4*x1214)));
evalcond[2]=((-1.0)+((r00*x1216))+((r01*x1215))+(((-1.0)*x1210*x1212))+(((-1.0)*x1211*x1214))+((x1209*x1213)));
evalcond[3]=((((-1.0)*cj4*r00*sj5*x1212))+(((-1.0)*r01*x1209*x1212))+((sj5*x1213))+(((-1.0)*x1210*x1214))+((x1208*x1211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=1.0;
j0=0;
IkReal x1217=(cj4*r22);
IkReal x1218=((0.016)*cj4);
IkReal x1219=(cj5*r21);
IkReal x1220=(r20*sj5);
IkReal x1221=(cj5*r11);
IkReal x1222=((2.04)*sj4);
IkReal x1223=((0.176)*sj4);
IkReal x1224=((0.528)*sj4);
IkReal x1225=((0.048)*cj4);
IkReal x1226=((0.68)*sj4);
IkReal x1227=(r12*sj4);
IkReal x1228=(cj4*r12);
IkReal x1229=(r10*sj5);
IkReal x1230=(r22*sj4);
IkReal x1231=((2.04)*x1217);
IkReal x1232=((0.528)*x1228);
IkReal x1233=(x1220*x1222);
IkReal x1234=(x1220*x1225);
IkReal x1235=(x1219*x1222);
IkReal x1236=(x1221*x1224);
IkReal x1237=(x1219*x1225);
IkReal x1238=(x1224*x1229);
IkReal x1239=((((12.0)*pz))+(((0.048)*x1230)));
IkReal x1240=(x1234+x1235+x1236+x1237+x1231+x1232+x1233+x1238);
j1eval[0]=((3.84)+(IKabs(((0.48)+x1240+(((-1.0)*x1239)))))+(IKabs(((-0.48)+x1240+(((-1.0)*x1239)))))+(((2.0)*(IKabs(((0.204)+(((-12.0)*py))+(((-1.0)*x1220*x1224))+((x1225*x1229))+(((-0.528)*x1217))+((x1221*x1225))+((x1221*x1222))+((x1222*x1229))+(((2.04)*x1228))+(((-0.048)*x1227))+(((-1.0)*x1219*x1224)))))))+(IKabs(((-0.48)+((x1218*x1219))+((x1223*x1229))+((x1219*x1226))+((x1220*x1226))+(((0.68)*x1217))+((x1221*x1223))+((x1218*x1220))+(((-0.016)*x1230))+(((-4.0)*pz))+(((0.176)*x1228)))))+(IKabs(((0.068)+(((-1.0)*x1220*x1223))+(((-0.176)*x1217))+((x1221*x1226))+((x1226*x1229))+((x1218*x1221))+((x1218*x1229))+(((-4.0)*py))+(((0.68)*x1228))+(((-1.0)*x1219*x1223))+(((-0.016)*x1227))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1241=((0.016)*cj4);
IkReal x1242=(cj5*r21);
IkReal x1243=(r20*sj5);
IkReal x1244=((0.048)*cj4);
IkReal x1245=(cj4*r12);
IkReal x1246=(cj4*r22);
IkReal x1247=(r22*sj4);
IkReal x1248=((2.04)*x1246);
IkReal x1249=((0.528)*x1245);
IkReal x1250=((0.68)*x1246);
IkReal x1251=((0.176)*x1245);
IkReal x1252=(sj4*x1243);
IkReal x1253=(r10*sj4*sj5);
IkReal x1254=(cj5*r11*sj4);
IkReal x1255=((2.04)*x1252);
IkReal x1256=(x1243*x1244);
IkReal x1257=((2.04)*sj4*x1242);
IkReal x1258=((0.528)*x1254);
IkReal x1259=(x1242*x1244);
IkReal x1260=((0.528)*x1253);
IkReal x1261=((0.68)*x1252);
IkReal x1262=(x1241*x1243);
IkReal x1263=((0.176)*x1254);
IkReal x1264=(x1241*x1242);
IkReal x1265=((0.176)*x1253);
IkReal x1266=((0.68)*sj4*x1242);
IkReal x1267=((((12.0)*pz))+(((0.048)*x1247)));
IkReal x1268=((((0.016)*x1247))+(((4.0)*pz)));
IkReal x1269=(x1263+x1262+x1261+x1266+x1265+x1264+x1250+x1251);
IkReal x1270=(x1249+x1248+x1260+x1256+x1257+x1255+x1258+x1259);
op[0]=((-0.48)+x1269+(((-1.0)*x1268)));
op[1]=0;
op[2]=((-0.48)+x1270+(((-1.0)*x1267)));
op[3]=0;
op[4]=((0.48)+x1270+(((-1.0)*x1267)));
op[5]=0;
op[6]=((0.48)+x1269+(((-1.0)*x1268)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1271=((4.0)*py);
IkReal x1272=(cj4*r22);
IkReal x1273=(cj5*sj4);
IkReal x1274=(r12*sj4);
IkReal x1275=((0.016)*cj4);
IkReal x1276=(r10*sj5);
IkReal x1277=(cj5*r11);
IkReal x1278=((0.048)*cj4);
IkReal x1279=(cj4*r12);
IkReal x1280=((0.68)*x1279);
IkReal x1281=((0.016)*x1274);
IkReal x1282=((0.176)*x1272);
IkReal x1283=(r20*sj4*sj5);
IkReal x1284=(x1275*x1277);
IkReal x1285=((0.68)*r11*x1273);
IkReal x1286=((0.68)*sj4*x1276);
IkReal x1287=(x1275*x1276);
IkReal x1288=((0.176)*x1283);
IkReal x1289=((0.176)*r21*x1273);
IkReal x1290=(x1271+x1281+x1282+x1289+x1288);
IkReal x1291=((0.068)+x1285+x1284+x1287+x1286+x1280);
IkReal x1292=((0.204)+(((-0.048)*x1274))+((x1276*x1278))+((x1277*x1278))+(((-12.0)*py))+(((2.04)*x1279))+(((2.04)*r11*x1273))+(((2.04)*sj4*x1276))+(((-0.528)*x1272))+(((-0.528)*x1283))+(((-0.528)*r21*x1273)));
j1evalpoly[0]=(x1291+(((-0.96)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x1290))+((x1292*(htj1*htj1*htj1*htj1)))+(((-1.92)*(htj1*htj1*htj1)))+((x1292*(htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x1291+(((-1.0)*x1290))))))+(((-0.96)*htj1)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1293=(cj5*sj4);
IkReal x1294=(cj1*cj4);
IkReal x1295=((1.0)*sj1);
IkReal x1296=(sj4*sj5);
if( IKabs(((((-1.0)*r11*x1293*x1295))+((cj1*r21*x1293))+((cj1*r20*x1296))+(((-1.0)*cj4*r12*x1295))+(((-1.0)*r10*x1295*x1296))+((r22*x1294)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r10*x1296))+((r21*sj1*x1293))+((cj4*r22*sj1))+((r12*x1294))+((r20*sj1*x1296))+((cj1*r11*x1293)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1293*x1295))+((cj1*r21*x1293))+((cj1*r20*x1296))+(((-1.0)*cj4*r12*x1295))+(((-1.0)*r10*x1295*x1296))+((r22*x1294))))+IKsqr((((cj1*r10*x1296))+((r21*sj1*x1293))+((cj4*r22*sj1))+((r12*x1294))+((r20*sj1*x1296))+((cj1*r11*x1293))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x1293*x1295))+((cj1*r21*x1293))+((cj1*r20*x1296))+(((-1.0)*cj4*r12*x1295))+(((-1.0)*r10*x1295*x1296))+((r22*x1294))), (((cj1*r10*x1296))+((r21*sj1*x1293))+((cj4*r22*sj1))+((r12*x1294))+((r20*sj1*x1296))+((cj1*r11*x1293))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1297=IKcos(j2);
IkReal x1298=IKsin(j2);
IkReal x1299=(sj3*sj5);
IkReal x1300=((0.17)*sj1);
IkReal x1301=((0.004)*cj4);
IkReal x1302=(cj5*r21);
IkReal x1303=((1.0)*cj4);
IkReal x1304=((1.0)*sj1);
IkReal x1305=(r12*sj4);
IkReal x1306=(r20*sj5);
IkReal x1307=(cj5*r11);
IkReal x1308=((1.0)*sj4);
IkReal x1309=(r22*sj4);
IkReal x1310=(r10*sj5);
IkReal x1311=(cj1*x1297);
IkReal x1312=((1.0)*cj5*sj3);
IkReal x1313=(cj1*x1298);
IkReal x1314=(sj5*x1308);
IkReal x1315=(sj1*x1297);
IkReal x1316=(x1298*x1304);
evalcond[0]=(x1315+x1313+(((-1.0)*x1306*x1308))+(((-1.0)*r22*x1303))+(((-1.0)*x1302*x1308)));
evalcond[1]=(x1311+(((-1.0)*x1307*x1308))+(((-1.0)*x1308*x1310))+(((-1.0)*x1316))+(((-1.0)*r12*x1303)));
evalcond[2]=(x1311+((r21*x1299))+(((-1.0)*cj3*x1303*x1306))+(((-1.0)*x1316))+(((-1.0)*r20*x1312))+(((-1.0)*cj3*x1302*x1303))+((cj3*x1309)));
evalcond[3]=((((-1.0)*cj3*x1303*x1310))+(((-1.0)*cj3*x1303*x1307))+(((-1.0)*x1313))+(((-1.0)*x1297*x1304))+((r11*x1299))+((cj3*x1305))+(((-1.0)*r10*x1312)));
evalcond[4]=((((0.17)*x1313))+(((-0.044)*sj1*x1298))+(((-1.0)*pz))+(((0.044)*x1311))+((x1297*x1300))+(((0.12)*cj1))+(((-0.004)*x1309))+((x1301*x1306))+((x1301*x1302)));
evalcond[5]=((0.017)+(((-0.12)*sj1))+(((0.17)*x1311))+(((-1.0)*py))+(((-0.044)*x1313))+(((-0.044)*x1315))+(((-1.0)*x1298*x1300))+((x1301*x1310))+(((-0.004)*x1305))+((x1301*x1307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1317=((1.0)*r20);
IkReal x1318=(((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)));
j3eval[0]=x1318;
j3eval[1]=IKsign(x1318);
j3eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x1317)))))+(IKabs((((r22*sj4))+(((-1.0)*cj4*cj5*r21))+(((-1.0)*cj4*sj5*x1317))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1319=((1.0)*cj5);
IkReal x1320=((1.0)*sj5);
IkReal x1321=((((-1.0)*r20*sj4*x1320))+(((-1.0)*cj4*r22))+(((-1.0)*r21*sj4*x1319)));
j3eval[0]=x1321;
j3eval[1]=IKsign(x1321);
j3eval[2]=((IKabs(((((-1.0)*cj4*r10*x1320))+((r12*sj4))+(((-1.0)*cj4*r11*x1319)))))+(IKabs((((r11*sj5))+(((-1.0)*r10*x1319))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1322=cj4*cj4;
IkReal x1323=r00*r00;
IkReal x1324=cj5*cj5;
IkReal x1325=r01*r01;
IkReal x1326=r02*r02;
IkReal x1327=(r00*sj5);
IkReal x1328=((1.0)*r01);
IkReal x1329=((2.0)*cj5*r01);
IkReal x1330=(cj4*r02*sj4);
IkReal x1331=((1.0)*x1324);
IkReal x1332=(x1322*x1323);
IkReal x1333=(x1326+x1325+x1332+(((-1.0)*x1325*x1331))+(((-1.0)*x1322*x1326))+((x1323*x1324))+(((-1.0)*x1327*x1329))+(((-2.0)*x1327*x1330))+(((-1.0)*x1329*x1330))+(((-1.0)*x1331*x1332))+((x1322*x1327*x1329))+((x1322*x1324*x1325)));
j3eval[0]=x1333;
j3eval[1]=((IKabs((((r02*sj4))+(((-1.0)*cj4*x1327))+(((-1.0)*cj4*cj5*x1328)))))+(IKabs(((((-1.0)*sj5*x1328))+((cj5*r00))))));
j3eval[2]=IKsign(x1333);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1334=cj4*cj4;
IkReal x1335=r00*r00;
IkReal x1336=cj5*cj5;
IkReal x1337=r01*r01;
IkReal x1338=r02*r02;
IkReal x1339=(r00*sj5);
IkReal x1340=((1.0)*r01);
IkReal x1341=((2.0)*cj5*r01);
IkReal x1342=(cj4*r02*sj4);
IkReal x1343=((1.0)*x1336);
IkReal x1344=(x1334*x1335);
CheckValue<IkReal> x1345 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x1339))+((r02*sj4))+(((-1.0)*cj4*cj5*x1340)))),IkReal(((((-1.0)*sj5*x1340))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1345.valid){
continue;
}
CheckValue<IkReal> x1346=IKPowWithIntegerCheck(IKsign((x1344+x1338+x1337+(((-1.0)*x1341*x1342))+((x1334*x1339*x1341))+((x1335*x1336))+(((-1.0)*x1339*x1341))+(((-2.0)*x1339*x1342))+(((-1.0)*x1343*x1344))+(((-1.0)*x1337*x1343))+(((-1.0)*x1334*x1338))+((x1334*x1336*x1337)))),-1);
if(!x1346.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1345.value)+(((1.5707963267949)*(x1346.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1347=IKsin(j3);
IkReal x1348=IKcos(j3);
IkReal x1349=(cj4*cj5);
IkReal x1350=(cj5*r00);
IkReal x1351=(r02*sj4);
IkReal x1352=((1.0)*x1348);
IkReal x1353=(r01*x1347);
IkReal x1354=((1.0)*x1347);
IkReal x1355=(sj5*x1348);
IkReal x1356=(cj4*sj5*x1347);
evalcond[0]=(((r21*x1347*x1349))+((r20*x1356))+(((-1.0)*cj5*r20*x1352))+(((-1.0)*r22*sj4*x1354))+((r21*x1355)));
evalcond[1]=(((r10*x1356))+(((-1.0)*r12*sj4*x1354))+(((-1.0)*cj5*r10*x1352))+((r11*x1355))+((r11*x1347*x1349)));
evalcond[2]=((1.0)+(((-1.0)*x1350*x1352))+((x1349*x1353))+((r00*x1356))+(((-1.0)*x1351*x1354))+((r01*x1355)));
evalcond[3]=(((sj5*x1353))+(((-1.0)*r01*x1349*x1352))+(((-1.0)*x1350*x1354))+((x1348*x1351))+(((-1.0)*cj4*r00*sj5*x1352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1357=((12.0)*pz);
IkReal x1358=((4.0)*pz);
IkReal x1359=((0.016)*cj4);
IkReal x1360=(cj5*r21);
IkReal x1361=(r20*sj5);
IkReal x1362=((0.048)*cj4);
IkReal x1363=((0.68)*sj4);
IkReal x1364=((0.528)*sj4);
IkReal x1365=(cj3*r22);
IkReal x1366=(r10*sj5);
IkReal x1367=((0.176)*sj4);
IkReal x1368=(cj5*r11);
IkReal x1369=(cj4*r12);
IkReal x1370=((2.04)*sj4);
IkReal x1371=(r22*sj4);
IkReal x1372=(cj4*r22);
IkReal x1373=((0.048)*x1371);
IkReal x1374=((2.04)*x1372);
IkReal x1375=((0.528)*x1369);
IkReal x1376=((0.016)*x1371);
IkReal x1377=((0.68)*x1372);
IkReal x1378=((0.528)*cj3*cj4);
IkReal x1379=((0.176)*cj3*cj4);
IkReal x1380=(cj5*r20*sj3);
IkReal x1381=(r21*sj3*sj5);
IkReal x1382=(x1361*x1370);
IkReal x1383=(x1361*x1362);
IkReal x1384=(x1360*x1370);
IkReal x1385=(x1360*x1362);
IkReal x1386=((0.528)*x1380);
IkReal x1387=(x1364*x1368);
IkReal x1388=(x1364*x1366);
IkReal x1389=(x1361*x1363);
IkReal x1390=(x1359*x1361);
IkReal x1391=(x1359*x1360);
IkReal x1392=(x1360*x1363);
IkReal x1393=(x1360*x1378);
IkReal x1394=(x1361*x1378);
IkReal x1395=(x1357+x1373);
IkReal x1396=(x1358+x1376);
IkReal x1397=(x1375+x1388+x1387);
IkReal x1398=(x1395+((x1364*x1365))+(((0.528)*x1381)));
IkReal x1399=(x1386+x1394+x1393);
IkReal x1400=(x1374+x1384+x1385+x1382+x1383);
IkReal x1401=(x1377+x1389+x1392+x1391+x1390);
j1eval[0]=((IKabs(((-0.48)+(((0.176)*x1380))+(((-1.0)*x1365*x1367))+x1401+(((-0.176)*x1381))+((x1360*x1379))+((x1361*x1379))+(((-1.0)*x1396)))))+(IKabs(((0.48)+x1397+x1395+(((-1.0)*x1400)))))+(IKabs(((0.48)+x1396+((x1367*x1368))+((x1366*x1367))+(((0.176)*x1369))+(((-1.0)*x1401)))))+(IKabs(((-0.48)+x1399+x1400+(((-1.0)*x1398)))))+(IKabs(((-0.48)+x1397+x1395+(((-1.0)*x1400)))))+(IKabs(((0.48)+x1399+x1400+(((-1.0)*x1398))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1402=((12.0)*pz);
IkReal x1403=((4.0)*pz);
IkReal x1404=((0.016)*cj4);
IkReal x1405=(cj5*r21);
IkReal x1406=(r20*sj5);
IkReal x1407=((0.048)*cj4);
IkReal x1408=(cj4*r12);
IkReal x1409=(r22*sj4);
IkReal x1410=(cj4*r22);
IkReal x1411=((0.048)*x1409);
IkReal x1412=((0.528)*x1408);
IkReal x1413=((0.016)*x1409);
IkReal x1414=((0.176)*x1408);
IkReal x1415=(sj4*x1406);
IkReal x1416=(r10*sj4*sj5);
IkReal x1417=(cj5*r11*sj4);
IkReal x1418=((0.528)*x1417);
IkReal x1419=((0.528)*x1416);
IkReal x1420=((0.176)*x1417);
IkReal x1421=((0.176)*x1416);
IkReal x1422=(x1418+x1419+x1411+x1412+x1402);
IkReal x1423=(x1421+x1420+x1413+x1414+x1403);
IkReal x1424=((((2.04)*sj4*x1405))+(((2.04)*x1415))+(((2.04)*x1410))+((x1405*x1407))+((x1406*x1407)));
IkReal x1425=(((x1404*x1406))+((x1404*x1405))+(((0.68)*x1415))+(((0.68)*x1410))+(((0.68)*sj4*x1405)));
op[0]=((0.48)+x1423+(((-1.0)*x1425)));
op[1]=0;
op[2]=((0.48)+x1422+(((-1.0)*x1424)));
op[3]=0;
op[4]=((-0.48)+x1422+(((-1.0)*x1424)));
op[5]=0;
op[6]=((-0.48)+x1423+(((-1.0)*x1425)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1426=((0.016)*cj4);
IkReal x1427=(cj5*r21);
IkReal x1428=(r20*sj5);
IkReal x1429=((0.048)*cj4);
IkReal x1430=((0.68)*sj4);
IkReal x1431=((0.176)*cj3);
IkReal x1432=(r22*sj4);
IkReal x1433=((2.04)*sj4);
IkReal x1434=(cj4*r22);
IkReal x1435=((0.68)*x1434);
IkReal x1436=((2.04)*x1434);
IkReal x1437=((0.528)*cj3*cj4);
IkReal x1438=(cj5*r20*sj3);
IkReal x1439=(r21*sj3*sj5);
IkReal x1440=((0.176)*x1438);
IkReal x1441=(x1428*x1430);
IkReal x1442=(x1426*x1428);
IkReal x1443=(x1428*x1433);
IkReal x1444=(x1428*x1429);
IkReal x1445=(x1427*x1433);
IkReal x1446=((0.528)*x1438);
IkReal x1447=(x1427*x1429);
IkReal x1448=(x1426*x1427);
IkReal x1449=(x1427*x1430);
IkReal x1450=(cj4*x1428*x1431);
IkReal x1451=(cj4*x1427*x1431);
IkReal x1452=(x1427*x1437);
IkReal x1453=(x1428*x1437);
IkReal x1454=((((12.0)*pz))+(((0.528)*cj3*x1432))+(((0.048)*x1432))+(((0.528)*x1439)));
IkReal x1455=((((0.176)*x1439))+(((4.0)*pz))+(((0.016)*x1432))+((x1431*x1432)));
IkReal x1456=(x1435+x1450+x1451+x1442+x1441+x1440+x1449+x1448);
IkReal x1457=(x1436+x1452+x1453+x1447+x1446+x1445+x1444+x1443);
j1evalpoly[0]=((0.48)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.48)+(((-1.0)*x1455))+x1456))))+(((-1.0)*x1455))+(((htj1*htj1)*(((0.48)+(((-1.0)*x1454))+x1457))))+(((htj1*htj1*htj1*htj1)*(((-0.48)+(((-1.0)*x1454))+x1457))))+x1456);
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1458=(cj4*r12);
IkReal x1459=((1.0)*cj1);
IkReal x1460=(cj4*r22);
IkReal x1461=(cj5*sj4);
IkReal x1462=(sj4*sj5);
if( IKabs((((r11*sj1*x1461))+((cj1*r21*x1461))+((r10*sj1*x1462))+((cj1*r20*x1462))+((cj1*x1460))+((sj1*x1458)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1459*x1461))+(((-1.0)*x1458*x1459))+(((-1.0)*r10*x1459*x1462))+((r21*sj1*x1461))+((sj1*x1460))+((r20*sj1*x1462)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*sj1*x1461))+((cj1*r21*x1461))+((r10*sj1*x1462))+((cj1*r20*x1462))+((cj1*x1460))+((sj1*x1458))))+IKsqr(((((-1.0)*r11*x1459*x1461))+(((-1.0)*x1458*x1459))+(((-1.0)*r10*x1459*x1462))+((r21*sj1*x1461))+((sj1*x1460))+((r20*sj1*x1462))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*sj1*x1461))+((cj1*r21*x1461))+((r10*sj1*x1462))+((cj1*r20*x1462))+((cj1*x1460))+((sj1*x1458))), ((((-1.0)*r11*x1459*x1461))+(((-1.0)*x1458*x1459))+(((-1.0)*r10*x1459*x1462))+((r21*sj1*x1461))+((sj1*x1460))+((r20*sj1*x1462))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1463=IKsin(j2);
IkReal x1464=IKcos(j2);
IkReal x1465=(sj3*sj5);
IkReal x1466=((0.004)*cj4);
IkReal x1467=(cj5*r21);
IkReal x1468=((1.0)*cj4);
IkReal x1469=(r12*sj4);
IkReal x1470=(r20*sj5);
IkReal x1471=(cj5*r11);
IkReal x1472=((1.0)*sj4);
IkReal x1473=(r22*sj4);
IkReal x1474=(r10*sj5);
IkReal x1475=(sj1*x1464);
IkReal x1476=(cj1*x1463);
IkReal x1477=(cj1*x1464);
IkReal x1478=((1.0)*cj5*sj3);
IkReal x1479=(sj5*x1472);
IkReal x1480=(sj1*x1463);
IkReal x1481=(x1476+x1475);
evalcond[0]=((((-1.0)*x1470*x1472))+(((-1.0)*r22*x1468))+(((-1.0)*x1467*x1472))+x1481);
evalcond[1]=((((-1.0)*x1471*x1472))+(((-1.0)*x1477))+x1480+(((-1.0)*r12*x1468))+(((-1.0)*x1472*x1474)));
evalcond[2]=(((cj3*x1469))+(((-1.0)*r10*x1478))+(((-1.0)*cj3*x1468*x1471))+(((-1.0)*cj3*x1468*x1474))+x1481+((r11*x1465)));
evalcond[3]=((((-1.0)*r20*x1478))+(((-1.0)*x1480))+(((-1.0)*cj3*x1467*x1468))+(((-1.0)*cj3*x1468*x1470))+((cj3*x1473))+x1477+((r21*x1465)));
evalcond[4]=(((x1466*x1470))+(((0.044)*x1477))+((x1466*x1467))+(((-1.0)*pz))+(((0.17)*x1475))+(((0.17)*x1476))+(((-0.044)*x1480))+(((0.12)*cj1))+(((-0.004)*x1473)));
evalcond[5]=((-0.017)+((x1466*x1471))+((x1466*x1474))+(((-0.004)*x1469))+(((0.044)*x1476))+(((0.044)*x1475))+(((0.17)*x1480))+(((0.12)*sj1))+(((-1.0)*py))+(((-0.17)*x1477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1482=((1.0)*cj5);
IkReal x1483=((1.0)*sj5);
CheckValue<IkReal> x1484 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x1482)))),IkReal(((((-1.0)*cj4*r11*x1482))+(((-1.0)*cj4*r10*x1483))+((r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1484.valid){
continue;
}
CheckValue<IkReal> x1485=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj4*x1482))+(((-1.0)*r20*sj4*x1483))+(((-1.0)*cj4*r22)))),-1);
if(!x1485.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1484.value)+(((1.5707963267949)*(x1485.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1486=IKsin(j3);
IkReal x1487=IKcos(j3);
IkReal x1488=(cj4*cj5);
IkReal x1489=(cj5*r00);
IkReal x1490=(r02*sj4);
IkReal x1491=((1.0)*x1487);
IkReal x1492=(r01*x1486);
IkReal x1493=((1.0)*x1486);
IkReal x1494=(sj5*x1487);
IkReal x1495=(cj4*sj5*x1486);
evalcond[0]=(((r20*x1495))+((r21*x1486*x1488))+(((-1.0)*cj5*r20*x1491))+((r21*x1494))+(((-1.0)*r22*sj4*x1493)));
evalcond[1]=(((r10*x1495))+((r11*x1486*x1488))+((r11*x1494))+(((-1.0)*r12*sj4*x1493))+(((-1.0)*cj5*r10*x1491)));
evalcond[2]=((1.0)+((r00*x1495))+((r01*x1494))+(((-1.0)*x1490*x1493))+((x1488*x1492))+(((-1.0)*x1489*x1491)));
evalcond[3]=(((sj5*x1492))+(((-1.0)*cj4*r00*sj5*x1491))+((x1487*x1490))+(((-1.0)*r01*x1488*x1491))+(((-1.0)*x1489*x1493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1496=((12.0)*pz);
IkReal x1497=((4.0)*pz);
IkReal x1498=((0.016)*cj4);
IkReal x1499=(cj5*r21);
IkReal x1500=(r20*sj5);
IkReal x1501=((0.048)*cj4);
IkReal x1502=((0.68)*sj4);
IkReal x1503=((0.528)*sj4);
IkReal x1504=(cj3*r22);
IkReal x1505=(r10*sj5);
IkReal x1506=((0.176)*sj4);
IkReal x1507=(cj5*r11);
IkReal x1508=(cj4*r12);
IkReal x1509=((2.04)*sj4);
IkReal x1510=(r22*sj4);
IkReal x1511=(cj4*r22);
IkReal x1512=((0.048)*x1510);
IkReal x1513=((2.04)*x1511);
IkReal x1514=((0.528)*x1508);
IkReal x1515=((0.016)*x1510);
IkReal x1516=((0.68)*x1511);
IkReal x1517=((0.528)*cj3*cj4);
IkReal x1518=((0.176)*cj3*cj4);
IkReal x1519=(cj5*r20*sj3);
IkReal x1520=(r21*sj3*sj5);
IkReal x1521=(x1500*x1509);
IkReal x1522=(x1500*x1501);
IkReal x1523=(x1499*x1509);
IkReal x1524=(x1499*x1501);
IkReal x1525=((0.528)*x1519);
IkReal x1526=(x1503*x1507);
IkReal x1527=(x1503*x1505);
IkReal x1528=(x1500*x1502);
IkReal x1529=(x1498*x1500);
IkReal x1530=(x1498*x1499);
IkReal x1531=(x1499*x1502);
IkReal x1532=(x1499*x1517);
IkReal x1533=(x1500*x1517);
IkReal x1534=(x1512+x1496);
IkReal x1535=(x1515+x1497);
IkReal x1536=(x1526+x1527+x1514);
IkReal x1537=(x1534+(((0.528)*x1520))+((x1503*x1504)));
IkReal x1538=(x1525+x1533+x1532);
IkReal x1539=(x1524+x1521+x1522+x1523+x1513);
IkReal x1540=(x1528+x1529+x1531+x1530+x1516);
j1eval[0]=((IKabs(((-0.48)+((x1499*x1518))+(((-1.0)*x1504*x1506))+(((-1.0)*x1535))+(((0.176)*x1519))+x1540+((x1500*x1518))+(((-0.176)*x1520)))))+(IKabs(((0.48)+(((-1.0)*x1539))+x1536+x1534)))+(IKabs(((-0.48)+(((-1.0)*x1539))+x1536+x1534)))+(IKabs(((0.48)+((x1506*x1507))+(((0.176)*x1508))+x1535+(((-1.0)*x1540))+((x1505*x1506)))))+(IKabs(((0.48)+(((-1.0)*x1537))+x1539+x1538)))+(IKabs(((-0.48)+(((-1.0)*x1537))+x1539+x1538))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1541=((12.0)*pz);
IkReal x1542=((4.0)*pz);
IkReal x1543=((0.016)*cj4);
IkReal x1544=(cj5*r21);
IkReal x1545=(r20*sj5);
IkReal x1546=((0.048)*cj4);
IkReal x1547=(cj4*r12);
IkReal x1548=(r22*sj4);
IkReal x1549=(cj4*r22);
IkReal x1550=((0.048)*x1548);
IkReal x1551=((0.528)*x1547);
IkReal x1552=((0.016)*x1548);
IkReal x1553=((0.176)*x1547);
IkReal x1554=(sj4*x1545);
IkReal x1555=(r10*sj4*sj5);
IkReal x1556=(cj5*r11*sj4);
IkReal x1557=((0.528)*x1556);
IkReal x1558=((0.528)*x1555);
IkReal x1559=((0.176)*x1556);
IkReal x1560=((0.176)*x1555);
IkReal x1561=(x1541+x1551+x1550+x1557+x1558);
IkReal x1562=(x1560+x1542+x1553+x1552+x1559);
IkReal x1563=(((x1544*x1546))+(((2.04)*x1554))+(((2.04)*x1549))+(((2.04)*sj4*x1544))+((x1545*x1546)));
IkReal x1564=((((0.68)*x1549))+(((0.68)*x1554))+(((0.68)*sj4*x1544))+((x1543*x1544))+((x1543*x1545)));
op[0]=((0.48)+x1562+(((-1.0)*x1564)));
op[1]=0;
op[2]=((0.48)+x1561+(((-1.0)*x1563)));
op[3]=0;
op[4]=((-0.48)+x1561+(((-1.0)*x1563)));
op[5]=0;
op[6]=((-0.48)+x1562+(((-1.0)*x1564)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1565=((0.016)*cj4);
IkReal x1566=(cj5*r21);
IkReal x1567=(r20*sj5);
IkReal x1568=((0.048)*cj4);
IkReal x1569=((0.68)*sj4);
IkReal x1570=((0.176)*cj3);
IkReal x1571=(r22*sj4);
IkReal x1572=((2.04)*sj4);
IkReal x1573=(cj4*r22);
IkReal x1574=((0.68)*x1573);
IkReal x1575=((2.04)*x1573);
IkReal x1576=((0.528)*cj3*cj4);
IkReal x1577=(cj5*r20*sj3);
IkReal x1578=(r21*sj3*sj5);
IkReal x1579=((0.176)*x1577);
IkReal x1580=(x1567*x1569);
IkReal x1581=(x1565*x1567);
IkReal x1582=(x1567*x1572);
IkReal x1583=(x1567*x1568);
IkReal x1584=(x1566*x1572);
IkReal x1585=((0.528)*x1577);
IkReal x1586=(x1566*x1568);
IkReal x1587=(x1565*x1566);
IkReal x1588=(x1566*x1569);
IkReal x1589=(cj4*x1567*x1570);
IkReal x1590=(cj4*x1566*x1570);
IkReal x1591=(x1566*x1576);
IkReal x1592=(x1567*x1576);
IkReal x1593=((((0.048)*x1571))+(((12.0)*pz))+(((0.528)*x1578))+(((0.528)*cj3*x1571)));
IkReal x1594=((((4.0)*pz))+((x1570*x1571))+(((0.176)*x1578))+(((0.016)*x1571)));
IkReal x1595=(x1579+x1574+x1588+x1589+x1580+x1581+x1587+x1590);
IkReal x1596=(x1575+x1582+x1583+x1586+x1584+x1585+x1591+x1592);
j1evalpoly[0]=((0.48)+(((-1.0)*x1594))+(((htj1*htj1)*(((0.48)+(((-1.0)*x1593))+x1596))))+x1595+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.48)+(((-1.0)*x1594))+x1595))))+(((htj1*htj1*htj1*htj1)*(((-0.48)+(((-1.0)*x1593))+x1596)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1597=(cj4*r12);
IkReal x1598=((1.0)*cj1);
IkReal x1599=(cj4*r22);
IkReal x1600=(cj5*sj4);
IkReal x1601=(sj4*sj5);
if( IKabs((((r11*sj1*x1600))+((cj1*x1599))+((cj1*r20*x1601))+((r10*sj1*x1601))+((cj1*r21*x1600))+((sj1*x1597)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1598*x1601))+(((-1.0)*r11*x1598*x1600))+((sj1*x1599))+((r21*sj1*x1600))+((r20*sj1*x1601))+(((-1.0)*x1597*x1598)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*sj1*x1600))+((cj1*x1599))+((cj1*r20*x1601))+((r10*sj1*x1601))+((cj1*r21*x1600))+((sj1*x1597))))+IKsqr(((((-1.0)*r10*x1598*x1601))+(((-1.0)*r11*x1598*x1600))+((sj1*x1599))+((r21*sj1*x1600))+((r20*sj1*x1601))+(((-1.0)*x1597*x1598))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*sj1*x1600))+((cj1*x1599))+((cj1*r20*x1601))+((r10*sj1*x1601))+((cj1*r21*x1600))+((sj1*x1597))), ((((-1.0)*r10*x1598*x1601))+(((-1.0)*r11*x1598*x1600))+((sj1*x1599))+((r21*sj1*x1600))+((r20*sj1*x1601))+(((-1.0)*x1597*x1598))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1602=IKsin(j2);
IkReal x1603=IKcos(j2);
IkReal x1604=(sj3*sj5);
IkReal x1605=((0.004)*cj4);
IkReal x1606=(cj5*r21);
IkReal x1607=((1.0)*cj4);
IkReal x1608=(r12*sj4);
IkReal x1609=(r20*sj5);
IkReal x1610=(cj5*r11);
IkReal x1611=((1.0)*sj4);
IkReal x1612=(r22*sj4);
IkReal x1613=(r10*sj5);
IkReal x1614=(sj1*x1603);
IkReal x1615=(cj1*x1602);
IkReal x1616=(cj1*x1603);
IkReal x1617=((1.0)*cj5*sj3);
IkReal x1618=(sj5*x1611);
IkReal x1619=(sj1*x1602);
IkReal x1620=(x1614+x1615);
evalcond[0]=((((-1.0)*x1606*x1611))+x1620+(((-1.0)*r22*x1607))+(((-1.0)*x1609*x1611)));
evalcond[1]=((((-1.0)*x1616))+(((-1.0)*x1611*x1613))+x1619+(((-1.0)*x1610*x1611))+(((-1.0)*r12*x1607)));
evalcond[2]=(x1620+(((-1.0)*cj3*x1607*x1613))+(((-1.0)*cj3*x1607*x1610))+((r11*x1604))+((cj3*x1608))+(((-1.0)*r10*x1617)));
evalcond[3]=((((-1.0)*x1619))+(((-1.0)*r20*x1617))+(((-1.0)*cj3*x1606*x1607))+x1616+(((-1.0)*cj3*x1607*x1609))+((r21*x1604))+((cj3*x1612)));
evalcond[4]=((((-0.044)*x1619))+(((0.17)*x1615))+(((0.17)*x1614))+(((-0.004)*x1612))+(((-1.0)*pz))+(((0.044)*x1616))+((x1605*x1606))+((x1605*x1609))+(((0.12)*cj1)));
evalcond[5]=((-0.017)+(((0.17)*x1619))+(((-0.17)*x1616))+(((0.12)*sj1))+(((-1.0)*py))+(((-0.004)*x1608))+(((0.044)*x1615))+(((0.044)*x1614))+((x1605*x1613))+((x1605*x1610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1621=((1.0)*r20);
CheckValue<IkReal> x1622 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*x1621)))),IkReal((((r22*sj4))+(((-1.0)*cj4*cj5*r21))+(((-1.0)*cj4*sj5*x1621)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1622.valid){
continue;
}
CheckValue<IkReal> x1623=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)))),-1);
if(!x1623.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1622.value)+(((1.5707963267949)*(x1623.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1624=IKsin(j3);
IkReal x1625=IKcos(j3);
IkReal x1626=(cj4*cj5);
IkReal x1627=(cj5*r00);
IkReal x1628=(r02*sj4);
IkReal x1629=((1.0)*x1625);
IkReal x1630=(r01*x1624);
IkReal x1631=((1.0)*x1624);
IkReal x1632=(sj5*x1625);
IkReal x1633=(cj4*sj5*x1624);
evalcond[0]=(((r21*x1632))+((r20*x1633))+((r21*x1624*x1626))+(((-1.0)*r22*sj4*x1631))+(((-1.0)*cj5*r20*x1629)));
evalcond[1]=(((r11*x1624*x1626))+((r11*x1632))+((r10*x1633))+(((-1.0)*r12*sj4*x1631))+(((-1.0)*cj5*r10*x1629)));
evalcond[2]=((1.0)+((r01*x1632))+((r00*x1633))+(((-1.0)*x1628*x1631))+(((-1.0)*x1627*x1629))+((x1626*x1630)));
evalcond[3]=(((sj5*x1630))+(((-1.0)*cj4*r00*sj5*x1629))+(((-1.0)*r01*x1626*x1629))+((x1625*x1628))+(((-1.0)*x1627*x1631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1634=((12.0)*pz);
IkReal x1635=((4.0)*pz);
IkReal x1636=((0.016)*cj4);
IkReal x1637=(cj5*r21);
IkReal x1638=(r20*sj5);
IkReal x1639=((0.048)*cj4);
IkReal x1640=((0.68)*sj4);
IkReal x1641=((0.528)*sj4);
IkReal x1642=(cj3*r22);
IkReal x1643=(r10*sj5);
IkReal x1644=((0.176)*sj4);
IkReal x1645=(cj5*r11);
IkReal x1646=(cj4*r12);
IkReal x1647=((2.04)*sj4);
IkReal x1648=(r22*sj4);
IkReal x1649=(cj4*r22);
IkReal x1650=((0.048)*x1648);
IkReal x1651=((2.04)*x1649);
IkReal x1652=((0.528)*x1646);
IkReal x1653=((0.016)*x1648);
IkReal x1654=((0.68)*x1649);
IkReal x1655=((0.528)*cj3*cj4);
IkReal x1656=((0.176)*cj3*cj4);
IkReal x1657=(cj5*r20*sj3);
IkReal x1658=(r21*sj3*sj5);
IkReal x1659=(x1638*x1647);
IkReal x1660=(x1638*x1639);
IkReal x1661=(x1637*x1647);
IkReal x1662=(x1637*x1639);
IkReal x1663=((0.528)*x1657);
IkReal x1664=(x1641*x1645);
IkReal x1665=(x1641*x1643);
IkReal x1666=(x1638*x1640);
IkReal x1667=(x1636*x1638);
IkReal x1668=(x1636*x1637);
IkReal x1669=(x1637*x1640);
IkReal x1670=(x1637*x1655);
IkReal x1671=(x1638*x1655);
IkReal x1672=(x1650+x1634);
IkReal x1673=(x1653+x1635);
IkReal x1674=(x1665+x1664+x1652);
IkReal x1675=((((0.528)*x1658))+x1672+((x1641*x1642)));
IkReal x1676=(x1663+x1670+x1671);
IkReal x1677=(x1662+x1661+x1660+x1659+x1651);
IkReal x1678=(x1669+x1668+x1667+x1666+x1654);
j1eval[0]=((IKabs(((0.48)+x1676+x1677+(((-1.0)*x1675)))))+(IKabs(((0.48)+x1674+x1672+(((-1.0)*x1677)))))+(IKabs(((-0.48)+x1676+x1677+(((-1.0)*x1675)))))+(IKabs(((-0.48)+x1674+x1672+(((-1.0)*x1677)))))+(IKabs(((-0.48)+((x1638*x1656))+x1678+(((-1.0)*x1642*x1644))+(((-0.176)*x1658))+(((0.176)*x1657))+(((-1.0)*x1673))+((x1637*x1656)))))+(IKabs(((0.48)+x1673+((x1644*x1645))+(((0.176)*x1646))+((x1643*x1644))+(((-1.0)*x1678))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1679=((12.0)*pz);
IkReal x1680=((4.0)*pz);
IkReal x1681=((0.016)*cj4);
IkReal x1682=(cj5*r21);
IkReal x1683=(r20*sj5);
IkReal x1684=((0.048)*cj4);
IkReal x1685=(cj4*r12);
IkReal x1686=(r22*sj4);
IkReal x1687=(cj4*r22);
IkReal x1688=((0.048)*x1686);
IkReal x1689=((0.528)*x1685);
IkReal x1690=((0.016)*x1686);
IkReal x1691=((0.176)*x1685);
IkReal x1692=(sj4*x1683);
IkReal x1693=(r10*sj4*sj5);
IkReal x1694=(cj5*r11*sj4);
IkReal x1695=((0.528)*x1694);
IkReal x1696=((0.528)*x1693);
IkReal x1697=((0.176)*x1694);
IkReal x1698=((0.176)*x1693);
IkReal x1699=(x1679+x1696+x1695+x1689+x1688);
IkReal x1700=(x1697+x1690+x1691+x1698+x1680);
IkReal x1701=((((2.04)*x1687))+(((2.04)*x1692))+((x1682*x1684))+(((2.04)*sj4*x1682))+((x1683*x1684)));
IkReal x1702=(((x1681*x1682))+((x1681*x1683))+(((0.68)*x1692))+(((0.68)*x1687))+(((0.68)*sj4*x1682)));
op[0]=((0.48)+x1700+(((-1.0)*x1702)));
op[1]=0;
op[2]=((0.48)+x1699+(((-1.0)*x1701)));
op[3]=0;
op[4]=((-0.48)+x1699+(((-1.0)*x1701)));
op[5]=0;
op[6]=((-0.48)+x1700+(((-1.0)*x1702)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1703=((0.016)*cj4);
IkReal x1704=(cj5*r21);
IkReal x1705=(r20*sj5);
IkReal x1706=((0.048)*cj4);
IkReal x1707=((0.68)*sj4);
IkReal x1708=((0.176)*cj3);
IkReal x1709=(r22*sj4);
IkReal x1710=((2.04)*sj4);
IkReal x1711=(cj4*r22);
IkReal x1712=((0.68)*x1711);
IkReal x1713=((2.04)*x1711);
IkReal x1714=((0.528)*cj3*cj4);
IkReal x1715=(cj5*r20*sj3);
IkReal x1716=(r21*sj3*sj5);
IkReal x1717=((0.176)*x1715);
IkReal x1718=(x1705*x1707);
IkReal x1719=(x1703*x1705);
IkReal x1720=(x1705*x1710);
IkReal x1721=(x1705*x1706);
IkReal x1722=(x1704*x1710);
IkReal x1723=((0.528)*x1715);
IkReal x1724=(x1704*x1706);
IkReal x1725=(x1703*x1704);
IkReal x1726=(x1704*x1707);
IkReal x1727=(cj4*x1705*x1708);
IkReal x1728=(cj4*x1704*x1708);
IkReal x1729=(x1704*x1714);
IkReal x1730=(x1705*x1714);
IkReal x1731=((((12.0)*pz))+(((0.528)*cj3*x1709))+(((0.528)*x1716))+(((0.048)*x1709)));
IkReal x1732=((((0.016)*x1709))+(((4.0)*pz))+(((0.176)*x1716))+((x1708*x1709)));
IkReal x1733=(x1728+x1726+x1727+x1725+x1712+x1717+x1719+x1718);
IkReal x1734=(x1729+x1724+x1722+x1723+x1720+x1721+x1730+x1713);
j1evalpoly[0]=((0.48)+x1733+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.48)+x1733+(((-1.0)*x1732))))))+(((htj1*htj1)*(((0.48)+x1734+(((-1.0)*x1731))))))+(((htj1*htj1*htj1*htj1)*(((-0.48)+x1734+(((-1.0)*x1731))))))+(((-1.0)*x1732)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1735=(cj4*r12);
IkReal x1736=((1.0)*cj1);
IkReal x1737=(cj4*r22);
IkReal x1738=(cj5*sj4);
IkReal x1739=(sj4*sj5);
if( IKabs((((r10*sj1*x1739))+((r11*sj1*x1738))+((sj1*x1735))+((cj1*r20*x1739))+((cj1*x1737))+((cj1*r21*x1738)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x1739))+((sj1*x1737))+(((-1.0)*r11*x1736*x1738))+(((-1.0)*x1735*x1736))+((r21*sj1*x1738))+(((-1.0)*r10*x1736*x1739)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*sj1*x1739))+((r11*sj1*x1738))+((sj1*x1735))+((cj1*r20*x1739))+((cj1*x1737))+((cj1*r21*x1738))))+IKsqr((((r20*sj1*x1739))+((sj1*x1737))+(((-1.0)*r11*x1736*x1738))+(((-1.0)*x1735*x1736))+((r21*sj1*x1738))+(((-1.0)*r10*x1736*x1739))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r10*sj1*x1739))+((r11*sj1*x1738))+((sj1*x1735))+((cj1*r20*x1739))+((cj1*x1737))+((cj1*r21*x1738))), (((r20*sj1*x1739))+((sj1*x1737))+(((-1.0)*r11*x1736*x1738))+(((-1.0)*x1735*x1736))+((r21*sj1*x1738))+(((-1.0)*r10*x1736*x1739))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1740=IKsin(j2);
IkReal x1741=IKcos(j2);
IkReal x1742=(sj3*sj5);
IkReal x1743=((0.004)*cj4);
IkReal x1744=(cj5*r21);
IkReal x1745=((1.0)*cj4);
IkReal x1746=(r12*sj4);
IkReal x1747=(r20*sj5);
IkReal x1748=(cj5*r11);
IkReal x1749=((1.0)*sj4);
IkReal x1750=(r22*sj4);
IkReal x1751=(r10*sj5);
IkReal x1752=(sj1*x1741);
IkReal x1753=(cj1*x1740);
IkReal x1754=(cj1*x1741);
IkReal x1755=((1.0)*cj5*sj3);
IkReal x1756=(sj5*x1749);
IkReal x1757=(sj1*x1740);
IkReal x1758=(x1753+x1752);
evalcond[0]=(x1758+(((-1.0)*r22*x1745))+(((-1.0)*x1747*x1749))+(((-1.0)*x1744*x1749)));
evalcond[1]=((((-1.0)*r12*x1745))+(((-1.0)*x1748*x1749))+x1757+(((-1.0)*x1749*x1751))+(((-1.0)*x1754)));
evalcond[2]=(x1758+(((-1.0)*cj3*x1745*x1748))+(((-1.0)*cj3*x1745*x1751))+(((-1.0)*r10*x1755))+((cj3*x1746))+((r11*x1742)));
evalcond[3]=((((-1.0)*cj3*x1744*x1745))+x1754+(((-1.0)*cj3*x1745*x1747))+((cj3*x1750))+((r21*x1742))+(((-1.0)*x1757))+(((-1.0)*r20*x1755)));
evalcond[4]=((((0.17)*x1752))+(((0.17)*x1753))+(((-1.0)*pz))+(((0.044)*x1754))+(((-0.044)*x1757))+((x1743*x1747))+((x1743*x1744))+(((-0.004)*x1750))+(((0.12)*cj1)));
evalcond[5]=((-0.017)+(((-0.17)*x1754))+(((0.17)*x1757))+(((0.12)*sj1))+(((-1.0)*py))+((x1743*x1751))+(((0.044)*x1752))+(((0.044)*x1753))+((x1743*x1748))+(((-0.004)*x1746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1759=(cj0*cj4);
IkReal x1760=((1.0)*sj4);
IkReal x1761=((1.0)*cj4*sj0);
CheckValue<IkReal> x1762=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21*x1760))+(((-1.0)*r20*sj5*x1760))+(((-1.0)*cj4*r22)))),-1);
if(!x1762.valid){
continue;
}
CheckValue<IkReal> x1763 = IKatan2WithCheck(IkReal((((cj0*cj5*r10))+(((-1.0)*cj5*r00*sj0))+((r01*sj0*sj5))+(((-1.0)*cj0*r11*sj5)))),IkReal((((r02*sj0*sj4))+(((-1.0)*cj5*r01*x1761))+((r10*sj5*x1759))+((cj5*r11*x1759))+(((-1.0)*cj0*r12*x1760))+(((-1.0)*r00*sj5*x1761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1763.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1762.value)))+(x1763.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1764=IKsin(j3);
IkReal x1765=IKcos(j3);
IkReal x1766=(sj5*x1765);
IkReal x1767=(cj4*cj5*x1764);
IkReal x1768=(cj4*sj5*x1764);
IkReal x1769=((1.0)*cj5*x1765);
IkReal x1770=((1.0)*sj4*x1764);
evalcond[0]=(((r21*x1766))+((r21*x1767))+((r20*x1768))+(((-1.0)*r20*x1769))+(((-1.0)*r22*x1770)));
evalcond[1]=((((-1.0)*r00*x1769))+((r01*x1767))+((r01*x1766))+((r00*x1768))+(((-1.0)*r02*x1770))+(((-1.0)*cj0)));
evalcond[2]=((((-1.0)*sj0))+((r11*x1767))+((r11*x1766))+((r10*x1768))+(((-1.0)*r10*x1769))+(((-1.0)*r12*x1770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1771=((0.48)*cj0);
IkReal x1772=((0.48)*sj0);
IkReal x1773=((0.048)*cj4);
IkReal x1774=((0.68)*sj4);
IkReal x1775=((12.0)*pz);
IkReal x1776=(r20*sj5);
IkReal x1777=(cj4*sj0);
IkReal x1778=(cj5*r21);
IkReal x1779=((2.04)*cj0);
IkReal x1780=(cj4*r22);
IkReal x1781=((0.528)*sj4);
IkReal x1782=(cj5*r11);
IkReal x1783=(cj4*r12);
IkReal x1784=((2.04)*sj4);
IkReal x1785=((0.016)*cj4);
IkReal x1786=(cj4*r02);
IkReal x1787=((4.0)*pz);
IkReal x1788=(sj0*x1775);
IkReal x1789=((0.528)*x1786);
IkReal x1790=((0.528)*x1783);
IkReal x1791=(cj0*x1775);
IkReal x1792=((0.048)*r22*sj4);
IkReal x1793=(cj0*x1778);
IkReal x1794=(cj5*r01*sj4);
IkReal x1795=((0.176)*sj4*sj5);
IkReal x1796=((0.016)*r22*sj4);
IkReal x1797=(cj5*r01*x1781);
IkReal x1798=(sj0*x1792);
IkReal x1799=(r00*sj5*x1781);
IkReal x1800=((2.04)*r22*x1777);
IkReal x1801=(x1779*x1780);
IkReal x1802=(x1781*x1782);
IkReal x1803=(r10*sj5*x1781);
IkReal x1804=(cj0*x1792);
IkReal x1805=(sj0*x1778*x1784);
IkReal x1806=(sj0*x1773*x1778);
IkReal x1807=(sj0*x1773*x1776);
IkReal x1808=(sj0*x1776*x1784);
IkReal x1809=(x1773*x1793);
IkReal x1810=(sj4*x1776*x1779);
IkReal x1811=(cj0*x1773*x1776);
IkReal x1812=(sj4*x1778*x1779);
IkReal x1813=(x1791+x1804);
IkReal x1814=(x1788+x1789+x1799+x1798+x1797);
IkReal x1815=(x1807+x1806+x1805+x1800+x1808);
IkReal x1816=(x1790+x1810+x1811+x1812+x1803+x1802+x1801+x1809);
j1eval[0]=((IKabs(((((-1.0)*x1813))+x1771+x1816)))+(IKabs(((((-1.0)*x1813))+(((-1.0)*x1771))+x1816)))+(IKabs(((((-1.0)*x1815))+(((-1.0)*x1772))+x1814)))+(IKabs((((r00*x1795))+(((-0.016)*x1777*x1778))+x1772+((sj0*x1796))+((sj0*x1787))+(((0.176)*x1794))+(((-0.68)*r22*x1777))+(((0.176)*x1786))+(((-0.016)*x1776*x1777))+(((-1.0)*sj0*x1774*x1776))+(((-1.0)*sj0*x1774*x1778)))))+(IKabs(((((-1.0)*x1815))+x1772+x1814)))+(IKabs((((cj0*x1776*x1785))+(((-1.0)*cj0*x1796))+((r10*x1795))+(((-1.0)*cj0*x1787))+(((0.176)*sj4*x1782))+(((0.68)*cj0*x1780))+((x1774*x1793))+((cj0*x1774*x1776))+(((-1.0)*x1771))+(((0.176)*x1783))+((x1785*x1793))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1817=((0.48)*sj0);
IkReal x1818=(sj4*sj5);
IkReal x1819=(cj5*sj4);
IkReal x1820=(cj4*sj0);
IkReal x1821=(r20*sj5);
IkReal x1822=((2.04)*sj0);
IkReal x1823=(pz*sj0);
IkReal x1824=(cj5*r21);
IkReal x1825=(cj4*r02);
IkReal x1826=((0.68)*sj0);
IkReal x1827=((12.0)*x1823);
IkReal x1828=((0.528)*x1825);
IkReal x1829=((4.0)*x1823);
IkReal x1830=((0.176)*x1825);
IkReal x1831=(r22*sj0*sj4);
IkReal x1832=((0.528)*r01*x1819);
IkReal x1833=((0.048)*x1831);
IkReal x1834=((0.528)*r00*x1818);
IkReal x1835=((2.04)*r22*x1820);
IkReal x1836=((0.016)*x1831);
IkReal x1837=((0.176)*r01*x1819);
IkReal x1838=((0.176)*r00*x1818);
IkReal x1839=((0.68)*r22*x1820);
IkReal x1840=(r21*x1819*x1822);
IkReal x1841=((0.048)*x1820*x1824);
IkReal x1842=((0.048)*x1820*x1821);
IkReal x1843=(r20*x1818*x1822);
IkReal x1844=(r21*x1819*x1826);
IkReal x1845=((0.016)*x1820*x1824);
IkReal x1846=((0.016)*x1820*x1821);
IkReal x1847=(r20*x1818*x1826);
IkReal x1848=(x1829+x1830+x1836+x1837+x1838);
IkReal x1849=(x1828+x1827+x1832+x1833+x1834);
IkReal x1850=(x1847+x1846+x1845+x1844+x1839);
IkReal x1851=(x1843+x1842+x1841+x1840+x1835);
op[0]=(x1848+x1817+(((-1.0)*x1850)));
op[1]=0;
op[2]=(x1849+x1817+(((-1.0)*x1851)));
op[3]=0;
op[4]=((((-1.0)*x1817))+x1849+(((-1.0)*x1851)));
op[5]=0;
op[6]=((((-1.0)*x1817))+x1848+(((-1.0)*x1850)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1852=((0.48)*cj0);
IkReal x1853=((0.048)*cj4);
IkReal x1854=((0.68)*sj4);
IkReal x1855=(cj0*sj4);
IkReal x1856=(r20*sj5);
IkReal x1857=(cj4*r12);
IkReal x1858=((0.016)*cj4);
IkReal x1859=(cj0*pz);
IkReal x1860=((0.528)*x1857);
IkReal x1861=((12.0)*x1859);
IkReal x1862=((0.176)*x1857);
IkReal x1863=((4.0)*x1859);
IkReal x1864=(cj0*cj5*r21);
IkReal x1865=(cj0*cj4*r22);
IkReal x1866=(r10*sj4*sj5);
IkReal x1867=(cj5*r11*sj4);
IkReal x1868=((2.04)*x1865);
IkReal x1869=((0.528)*x1867);
IkReal x1870=((0.528)*x1866);
IkReal x1871=((0.048)*r22*x1855);
IkReal x1872=((0.176)*x1867);
IkReal x1873=((0.68)*x1865);
IkReal x1874=((0.176)*x1866);
IkReal x1875=((0.016)*r22*x1855);
IkReal x1876=(x1853*x1864);
IkReal x1877=((2.04)*x1855*x1856);
IkReal x1878=(cj0*x1853*x1856);
IkReal x1879=((2.04)*cj5*r21*x1855);
IkReal x1880=(cj0*x1856*x1858);
IkReal x1881=(cj0*x1854*x1856);
IkReal x1882=(x1854*x1864);
IkReal x1883=(x1858*x1864);
IkReal x1884=(x1861+x1871);
IkReal x1885=(x1863+x1875);
IkReal x1886=(x1862+x1874+x1872+x1873+x1883+x1882+x1881+x1880);
IkReal x1887=(x1860+x1869+x1868+x1876+x1877+x1870+x1878+x1879);
j1evalpoly[0]=((((htj1*htj1*htj1*htj1*htj1*htj1)*((x1886+(((-1.0)*x1885))+(((-1.0)*x1852))))))+(((htj1*htj1)*((x1852+x1887+(((-1.0)*x1884))))))+x1852+x1886+(((htj1*htj1*htj1*htj1)*((x1887+(((-1.0)*x1884))+(((-1.0)*x1852))))))+(((-1.0)*x1885)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1888=(r22*sj1);
IkReal x1889=(cj3*sj4);
IkReal x1890=(r20*sj5);
IkReal x1891=(cj5*r21);
IkReal x1892=(cj1*r22);
IkReal x1893=(cj1*sj4);
IkReal x1894=((1.0)*sj1);
IkReal x1895=(cj3*cj4);
IkReal x1896=(sj1*sj4);
IkReal x1897=(cj1*x1895);
IkReal x1898=(cj5*r20*sj3);
IkReal x1899=(r21*sj3*sj5);
if( IKabs(((((-1.0)*x1891*x1894*x1895))+((cj4*x1892))+(((-1.0)*x1890*x1894*x1895))+((x1888*x1889))+((x1891*x1893))+(((-1.0)*x1894*x1898))+((sj1*x1899))+((x1890*x1893)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x1888))+(((-1.0)*x1889*x1892))+((cj1*x1898))+((x1891*x1897))+((x1891*x1896))+(((-1.0)*cj1*x1899))+((x1890*x1897))+((x1890*x1896)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1891*x1894*x1895))+((cj4*x1892))+(((-1.0)*x1890*x1894*x1895))+((x1888*x1889))+((x1891*x1893))+(((-1.0)*x1894*x1898))+((sj1*x1899))+((x1890*x1893))))+IKsqr((((cj4*x1888))+(((-1.0)*x1889*x1892))+((cj1*x1898))+((x1891*x1897))+((x1891*x1896))+(((-1.0)*cj1*x1899))+((x1890*x1897))+((x1890*x1896))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1891*x1894*x1895))+((cj4*x1892))+(((-1.0)*x1890*x1894*x1895))+((x1888*x1889))+((x1891*x1893))+(((-1.0)*x1894*x1898))+((sj1*x1899))+((x1890*x1893))), (((cj4*x1888))+(((-1.0)*x1889*x1892))+((cj1*x1898))+((x1891*x1897))+((x1891*x1896))+(((-1.0)*cj1*x1899))+((x1890*x1897))+((x1890*x1896))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1900=IKsin(j2);
IkReal x1901=IKcos(j2);
IkReal x1902=(r02*sj4);
IkReal x1903=(sj3*sj5);
IkReal x1904=((1.0)*cj3);
IkReal x1905=((1.0)*cj0);
IkReal x1906=((1.0)*cj4);
IkReal x1907=(cj4*sj5);
IkReal x1908=((0.004)*sj4);
IkReal x1909=((0.12)*sj1);
IkReal x1910=((0.044)*cj0);
IkReal x1911=(cj3*sj4);
IkReal x1912=(cj4*cj5);
IkReal x1913=((0.17)*cj0);
IkReal x1914=(cj1*x1901);
IkReal x1915=((1.0)*cj5*sj3);
IkReal x1916=(r01*x1912);
IkReal x1917=(sj0*x1900);
IkReal x1918=((0.004)*x1912);
IkReal x1919=(cj1*x1900);
IkReal x1920=((1.0)*sj4*sj5);
IkReal x1921=(sj1*x1900);
IkReal x1922=(sj1*x1901);
IkReal x1923=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r22*x1906))+(((-1.0)*r21*x1923))+(((-1.0)*r20*x1920))+x1922+x1919);
evalcond[1]=((((-1.0)*r01*x1923))+(((-1.0)*r00*x1920))+(((-1.0)*sj0*x1914))+((sj1*x1917))+(((-1.0)*r02*x1906)));
evalcond[2]=((((-1.0)*r11*x1923))+(((-1.0)*r12*x1906))+((cj0*x1914))+(((-1.0)*r10*x1920))+(((-1.0)*x1905*x1921)));
evalcond[3]=((((-1.0)*x1921))+(((-1.0)*r21*x1904*x1912))+((r22*x1911))+(((-1.0)*r20*x1904*x1907))+((r21*x1903))+x1914+(((-1.0)*r20*x1915)));
evalcond[4]=((((-1.0)*r00*x1915))+((r01*x1903))+(((-1.0)*x1904*x1916))+((cj1*x1917))+((cj3*x1902))+(((-1.0)*r00*x1904*x1907))+((sj0*x1922)));
evalcond[5]=((((-1.0)*r11*x1904*x1912))+(((-1.0)*x1905*x1919))+(((-1.0)*r10*x1904*x1907))+(((-1.0)*r10*x1915))+((r12*x1911))+((r11*x1903))+(((-1.0)*x1905*x1922)));
evalcond[6]=((((-1.0)*r22*x1908))+(((0.17)*x1922))+(((-1.0)*pz))+(((0.044)*x1914))+((r21*x1918))+(((0.004)*r20*x1907))+(((0.12)*cj1))+(((-0.044)*x1921))+(((0.17)*x1919)));
evalcond[7]=((((0.004)*x1916))+(((0.004)*r00*x1907))+(((0.044)*sj0*x1922))+(((-0.004)*x1902))+(((-1.0)*px))+((sj0*x1909))+(((-0.17)*sj0*x1914))+(((-0.017)*sj0))+(((0.17)*sj1*x1917))+(((0.044)*cj1*x1917)));
evalcond[8]=(((x1913*x1914))+(((-1.0)*x1910*x1919))+(((0.017)*cj0))+(((-1.0)*x1910*x1922))+(((0.004)*r10*x1907))+((r11*x1918))+(((-1.0)*x1913*x1921))+(((-1.0)*py))+(((-1.0)*r12*x1908))+(((-1.0)*cj0*x1909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1924=((1.0)*cj5);
IkReal x1925=(cj0*r21);
IkReal x1926=(cj0*r20);
IkReal x1927=((1.0)*cj4);
CheckValue<IkReal> x1928=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*x1927))+(((-1.0)*r10*sj4*sj5))+(((-1.0)*r11*sj4*x1924)))),-1);
if(!x1928.valid){
continue;
}
CheckValue<IkReal> x1929 = IKatan2WithCheck(IkReal(((((-1.0)*x1924*x1926))+((sj5*x1925)))),IkReal(((((-1.0)*sj5*x1926*x1927))+((cj0*r22*sj4))+(((-1.0)*cj4*x1924*x1925)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1929.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1928.value)))+(x1929.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1930=IKsin(j3);
IkReal x1931=IKcos(j3);
IkReal x1932=(sj5*x1931);
IkReal x1933=(cj4*cj5*x1930);
IkReal x1934=(cj4*sj5*x1930);
IkReal x1935=((1.0)*cj5*x1931);
IkReal x1936=((1.0)*sj4*x1930);
evalcond[0]=((((-1.0)*r22*x1936))+(((-1.0)*r20*x1935))+((r21*x1932))+((r21*x1933))+((r20*x1934)));
evalcond[1]=(((r00*x1934))+((r01*x1932))+((r01*x1933))+(((-1.0)*cj0))+(((-1.0)*r00*x1935))+(((-1.0)*r02*x1936)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x1936))+(((-1.0)*r10*x1935))+((r11*x1933))+((r11*x1932))+((r10*x1934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1937=((0.48)*cj0);
IkReal x1938=((0.48)*sj0);
IkReal x1939=((0.048)*cj4);
IkReal x1940=((0.68)*sj4);
IkReal x1941=((12.0)*pz);
IkReal x1942=(r20*sj5);
IkReal x1943=(cj4*sj0);
IkReal x1944=(cj5*r21);
IkReal x1945=((2.04)*cj0);
IkReal x1946=(cj4*r22);
IkReal x1947=((0.528)*sj4);
IkReal x1948=(cj5*r11);
IkReal x1949=(cj4*r12);
IkReal x1950=((2.04)*sj4);
IkReal x1951=((0.016)*cj4);
IkReal x1952=(cj4*r02);
IkReal x1953=((4.0)*pz);
IkReal x1954=(sj0*x1941);
IkReal x1955=((0.528)*x1952);
IkReal x1956=((0.528)*x1949);
IkReal x1957=(cj0*x1941);
IkReal x1958=((0.048)*r22*sj4);
IkReal x1959=(cj0*x1944);
IkReal x1960=(cj5*r01*sj4);
IkReal x1961=((0.176)*sj4*sj5);
IkReal x1962=((0.016)*r22*sj4);
IkReal x1963=(cj5*r01*x1947);
IkReal x1964=(sj0*x1958);
IkReal x1965=(r00*sj5*x1947);
IkReal x1966=((2.04)*r22*x1943);
IkReal x1967=(x1945*x1946);
IkReal x1968=(x1947*x1948);
IkReal x1969=(r10*sj5*x1947);
IkReal x1970=(cj0*x1958);
IkReal x1971=(sj0*x1944*x1950);
IkReal x1972=(sj0*x1939*x1944);
IkReal x1973=(sj0*x1939*x1942);
IkReal x1974=(sj0*x1942*x1950);
IkReal x1975=(x1939*x1959);
IkReal x1976=(sj4*x1942*x1945);
IkReal x1977=(cj0*x1939*x1942);
IkReal x1978=(sj4*x1944*x1945);
IkReal x1979=(x1970+x1957);
IkReal x1980=(x1964+x1965+x1963+x1955+x1954);
IkReal x1981=(x1966+x1974+x1973+x1972+x1971);
IkReal x1982=(x1968+x1969+x1967+x1978+x1977+x1976+x1975+x1956);
j1eval[0]=((IKabs(((((-1.0)*x1981))+x1980+(((-1.0)*x1938)))))+(IKabs((((cj0*x1940*x1942))+(((0.176)*x1949))+((r10*x1961))+(((-1.0)*cj0*x1962))+(((-1.0)*cj0*x1953))+(((0.68)*cj0*x1946))+((x1951*x1959))+((x1940*x1959))+(((0.176)*sj4*x1948))+((cj0*x1942*x1951))+(((-1.0)*x1937)))))+(IKabs(((((-1.0)*x1979))+x1982+x1937)))+(IKabs(((((-1.0)*x1979))+x1982+(((-1.0)*x1937)))))+(IKabs(((((-1.0)*sj0*x1940*x1942))+(((-1.0)*sj0*x1940*x1944))+(((-0.68)*r22*x1943))+((sj0*x1962))+((sj0*x1953))+((r00*x1961))+x1938+(((-0.016)*x1943*x1944))+(((0.176)*x1960))+(((0.176)*x1952))+(((-0.016)*x1942*x1943)))))+(IKabs(((((-1.0)*x1981))+x1980+x1938))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1983=((0.48)*sj0);
IkReal x1984=(sj4*sj5);
IkReal x1985=(cj5*sj4);
IkReal x1986=(cj4*sj0);
IkReal x1987=(r20*sj5);
IkReal x1988=((2.04)*sj0);
IkReal x1989=(pz*sj0);
IkReal x1990=(cj5*r21);
IkReal x1991=(cj4*r02);
IkReal x1992=((0.68)*sj0);
IkReal x1993=((12.0)*x1989);
IkReal x1994=((0.528)*x1991);
IkReal x1995=((4.0)*x1989);
IkReal x1996=((0.176)*x1991);
IkReal x1997=(r22*sj0*sj4);
IkReal x1998=((0.528)*r01*x1985);
IkReal x1999=((0.048)*x1997);
IkReal x2000=((0.528)*r00*x1984);
IkReal x2001=((2.04)*r22*x1986);
IkReal x2002=((0.016)*x1997);
IkReal x2003=((0.176)*r01*x1985);
IkReal x2004=((0.176)*r00*x1984);
IkReal x2005=((0.68)*r22*x1986);
IkReal x2006=(r21*x1985*x1988);
IkReal x2007=((0.048)*x1986*x1990);
IkReal x2008=((0.048)*x1986*x1987);
IkReal x2009=(r20*x1984*x1988);
IkReal x2010=(r21*x1985*x1992);
IkReal x2011=((0.016)*x1986*x1990);
IkReal x2012=((0.016)*x1986*x1987);
IkReal x2013=(r20*x1984*x1992);
IkReal x2014=(x2002+x2003+x2004+x1995+x1996);
IkReal x2015=(x2000+x1993+x1994+x1999+x1998);
IkReal x2016=(x2005+x2011+x2010+x2013+x2012);
IkReal x2017=(x2001+x2006+x2007+x2008+x2009);
op[0]=((((-1.0)*x2016))+x2014+x1983);
op[1]=0;
op[2]=((((-1.0)*x2017))+x2015+x1983);
op[3]=0;
op[4]=((((-1.0)*x2017))+(((-1.0)*x1983))+x2015);
op[5]=0;
op[6]=((((-1.0)*x2016))+(((-1.0)*x1983))+x2014);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2018=((0.48)*cj0);
IkReal x2019=((0.048)*cj4);
IkReal x2020=((0.68)*sj4);
IkReal x2021=(cj0*sj4);
IkReal x2022=(r20*sj5);
IkReal x2023=(cj4*r12);
IkReal x2024=((0.016)*cj4);
IkReal x2025=(cj0*pz);
IkReal x2026=((0.528)*x2023);
IkReal x2027=((12.0)*x2025);
IkReal x2028=((0.176)*x2023);
IkReal x2029=((4.0)*x2025);
IkReal x2030=(cj0*cj5*r21);
IkReal x2031=(cj0*cj4*r22);
IkReal x2032=(r10*sj4*sj5);
IkReal x2033=(cj5*r11*sj4);
IkReal x2034=((2.04)*x2031);
IkReal x2035=((0.528)*x2033);
IkReal x2036=((0.528)*x2032);
IkReal x2037=((0.048)*r22*x2021);
IkReal x2038=((0.176)*x2033);
IkReal x2039=((0.68)*x2031);
IkReal x2040=((0.176)*x2032);
IkReal x2041=((0.016)*r22*x2021);
IkReal x2042=(x2019*x2030);
IkReal x2043=((2.04)*x2021*x2022);
IkReal x2044=(cj0*x2019*x2022);
IkReal x2045=((2.04)*cj5*r21*x2021);
IkReal x2046=(cj0*x2022*x2024);
IkReal x2047=(cj0*x2020*x2022);
IkReal x2048=(x2020*x2030);
IkReal x2049=(x2024*x2030);
IkReal x2050=(x2027+x2037);
IkReal x2051=(x2041+x2029);
IkReal x2052=(x2046+x2047+x2040+x2048+x2049+x2028+x2039+x2038);
IkReal x2053=(x2044+x2045+x2042+x2043+x2026+x2036+x2035+x2034);
j1evalpoly[0]=(x2052+x2018+(((htj1*htj1)*((x2053+x2018+(((-1.0)*x2050))))))+(((htj1*htj1*htj1*htj1)*(((((-1.0)*x2018))+x2053+(((-1.0)*x2050))))))+(((-1.0)*x2051))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x2018))+x2052+(((-1.0)*x2051)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2054=(r22*sj1);
IkReal x2055=(cj3*sj4);
IkReal x2056=(r20*sj5);
IkReal x2057=(cj5*r21);
IkReal x2058=(cj1*r22);
IkReal x2059=(cj1*sj4);
IkReal x2060=((1.0)*sj1);
IkReal x2061=(cj3*cj4);
IkReal x2062=(sj1*sj4);
IkReal x2063=(cj1*x2061);
IkReal x2064=(cj5*r20*sj3);
IkReal x2065=(r21*sj3*sj5);
if( IKabs((((cj4*x2058))+((x2054*x2055))+((sj1*x2065))+(((-1.0)*x2056*x2060*x2061))+((x2057*x2059))+((x2056*x2059))+(((-1.0)*x2057*x2060*x2061))+(((-1.0)*x2060*x2064)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2055*x2058))+((cj4*x2054))+((x2056*x2063))+((x2056*x2062))+((cj1*x2064))+((x2057*x2062))+((x2057*x2063))+(((-1.0)*cj1*x2065)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x2058))+((x2054*x2055))+((sj1*x2065))+(((-1.0)*x2056*x2060*x2061))+((x2057*x2059))+((x2056*x2059))+(((-1.0)*x2057*x2060*x2061))+(((-1.0)*x2060*x2064))))+IKsqr(((((-1.0)*x2055*x2058))+((cj4*x2054))+((x2056*x2063))+((x2056*x2062))+((cj1*x2064))+((x2057*x2062))+((x2057*x2063))+(((-1.0)*cj1*x2065))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*x2058))+((x2054*x2055))+((sj1*x2065))+(((-1.0)*x2056*x2060*x2061))+((x2057*x2059))+((x2056*x2059))+(((-1.0)*x2057*x2060*x2061))+(((-1.0)*x2060*x2064))), ((((-1.0)*x2055*x2058))+((cj4*x2054))+((x2056*x2063))+((x2056*x2062))+((cj1*x2064))+((x2057*x2062))+((x2057*x2063))+(((-1.0)*cj1*x2065))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2066=IKsin(j2);
IkReal x2067=IKcos(j2);
IkReal x2068=(r02*sj4);
IkReal x2069=(sj3*sj5);
IkReal x2070=((1.0)*cj3);
IkReal x2071=((1.0)*cj0);
IkReal x2072=((1.0)*cj4);
IkReal x2073=(cj4*sj5);
IkReal x2074=((0.004)*sj4);
IkReal x2075=((0.12)*sj1);
IkReal x2076=((0.044)*cj0);
IkReal x2077=(cj3*sj4);
IkReal x2078=(cj4*cj5);
IkReal x2079=((0.17)*cj0);
IkReal x2080=(cj1*x2067);
IkReal x2081=((1.0)*cj5*sj3);
IkReal x2082=(r01*x2078);
IkReal x2083=(sj0*x2066);
IkReal x2084=((0.004)*x2078);
IkReal x2085=(cj1*x2066);
IkReal x2086=((1.0)*sj4*sj5);
IkReal x2087=(sj1*x2066);
IkReal x2088=(sj1*x2067);
IkReal x2089=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r21*x2089))+(((-1.0)*r20*x2086))+x2088+x2085+(((-1.0)*r22*x2072)));
evalcond[1]=((((-1.0)*r02*x2072))+((sj1*x2083))+(((-1.0)*sj0*x2080))+(((-1.0)*r01*x2089))+(((-1.0)*r00*x2086)));
evalcond[2]=((((-1.0)*r12*x2072))+(((-1.0)*x2071*x2087))+(((-1.0)*r11*x2089))+(((-1.0)*r10*x2086))+((cj0*x2080)));
evalcond[3]=(((r21*x2069))+((r22*x2077))+(((-1.0)*x2087))+(((-1.0)*r20*x2081))+x2080+(((-1.0)*r21*x2070*x2078))+(((-1.0)*r20*x2070*x2073)));
evalcond[4]=(((sj0*x2088))+((cj1*x2083))+(((-1.0)*x2070*x2082))+((r01*x2069))+((cj3*x2068))+(((-1.0)*r00*x2070*x2073))+(((-1.0)*r00*x2081)));
evalcond[5]=(((r12*x2077))+((r11*x2069))+(((-1.0)*x2071*x2088))+(((-1.0)*x2071*x2085))+(((-1.0)*r10*x2081))+(((-1.0)*r11*x2070*x2078))+(((-1.0)*r10*x2070*x2073)));
evalcond[6]=((((0.17)*x2085))+(((0.17)*x2088))+(((-0.044)*x2087))+(((0.004)*r20*x2073))+(((-1.0)*r22*x2074))+(((-1.0)*pz))+((r21*x2084))+(((0.12)*cj1))+(((0.044)*x2080)));
evalcond[7]=((((0.004)*r00*x2073))+(((0.004)*x2082))+(((0.17)*sj1*x2083))+(((-1.0)*px))+(((-0.017)*sj0))+(((-0.004)*x2068))+((sj0*x2075))+(((-0.17)*sj0*x2080))+(((0.044)*cj1*x2083))+(((0.044)*sj0*x2088)));
evalcond[8]=((((-1.0)*r12*x2074))+(((0.017)*cj0))+(((-1.0)*cj0*x2075))+(((-1.0)*x2076*x2085))+(((-1.0)*x2076*x2088))+(((-1.0)*py))+(((0.004)*r10*x2073))+(((-1.0)*x2079*x2087))+((x2079*x2080))+((r11*x2084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2090=(sj0*sj5);
IkReal x2091=((1.0)*cj5*sj0);
CheckValue<IkReal> x2092=IKPowWithIntegerCheck(IKsign((((r00*sj4*sj5))+((cj5*r01*sj4))+((cj4*r02)))),-1);
if(!x2092.valid){
continue;
}
CheckValue<IkReal> x2093 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x2091))+((r21*x2090)))),IkReal((((r22*sj0*sj4))+(((-1.0)*cj4*r20*x2090))+(((-1.0)*cj4*r21*x2091)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2093.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2092.value)))+(x2093.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2094=IKsin(j3);
IkReal x2095=IKcos(j3);
IkReal x2096=(sj5*x2095);
IkReal x2097=(cj4*cj5*x2094);
IkReal x2098=(cj4*sj5*x2094);
IkReal x2099=((1.0)*cj5*x2095);
IkReal x2100=((1.0)*sj4*x2094);
evalcond[0]=(((r20*x2098))+(((-1.0)*r22*x2100))+(((-1.0)*r20*x2099))+((r21*x2097))+((r21*x2096)));
evalcond[1]=((((-1.0)*r02*x2100))+((r01*x2097))+((r01*x2096))+((r00*x2098))+(((-1.0)*cj0))+(((-1.0)*r00*x2099)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x2100))+((r10*x2098))+(((-1.0)*r10*x2099))+((r11*x2096))+((r11*x2097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x2101=((0.48)*cj0);
IkReal x2102=((0.48)*sj0);
IkReal x2103=((0.048)*cj4);
IkReal x2104=((0.68)*sj4);
IkReal x2105=((12.0)*pz);
IkReal x2106=(r20*sj5);
IkReal x2107=(cj4*sj0);
IkReal x2108=(cj5*r21);
IkReal x2109=((2.04)*cj0);
IkReal x2110=(cj4*r22);
IkReal x2111=((0.528)*sj4);
IkReal x2112=(cj5*r11);
IkReal x2113=(cj4*r12);
IkReal x2114=((2.04)*sj4);
IkReal x2115=((0.016)*cj4);
IkReal x2116=(cj4*r02);
IkReal x2117=((4.0)*pz);
IkReal x2118=(sj0*x2105);
IkReal x2119=((0.528)*x2116);
IkReal x2120=((0.528)*x2113);
IkReal x2121=(cj0*x2105);
IkReal x2122=((0.048)*r22*sj4);
IkReal x2123=(cj0*x2108);
IkReal x2124=(cj5*r01*sj4);
IkReal x2125=((0.176)*sj4*sj5);
IkReal x2126=((0.016)*r22*sj4);
IkReal x2127=(cj5*r01*x2111);
IkReal x2128=(sj0*x2122);
IkReal x2129=(r00*sj5*x2111);
IkReal x2130=((2.04)*r22*x2107);
IkReal x2131=(x2109*x2110);
IkReal x2132=(x2111*x2112);
IkReal x2133=(r10*sj5*x2111);
IkReal x2134=(cj0*x2122);
IkReal x2135=(sj0*x2108*x2114);
IkReal x2136=(sj0*x2103*x2108);
IkReal x2137=(sj0*x2103*x2106);
IkReal x2138=(sj0*x2106*x2114);
IkReal x2139=(x2103*x2123);
IkReal x2140=(sj4*x2106*x2109);
IkReal x2141=(cj0*x2103*x2106);
IkReal x2142=(sj4*x2108*x2109);
IkReal x2143=(x2121+x2134);
IkReal x2144=(x2127+x2129+x2128+x2118+x2119);
IkReal x2145=(x2136+x2137+x2135+x2130+x2138);
IkReal x2146=(x2120+x2132+x2133+x2131+x2139+x2142+x2141+x2140);
j1eval[0]=((IKabs((x2102+x2144+(((-1.0)*x2145)))))+(IKabs((x2101+x2146+(((-1.0)*x2143)))))+(IKabs(((((-1.0)*x2101))+x2146+(((-1.0)*x2143)))))+(IKabs(((((-1.0)*x2102))+x2144+(((-1.0)*x2145)))))+(IKabs((((sj0*x2117))+((sj0*x2126))+x2102+(((-0.68)*r22*x2107))+(((-0.016)*x2107*x2108))+(((-1.0)*sj0*x2104*x2108))+(((-1.0)*sj0*x2104*x2106))+(((-0.016)*x2106*x2107))+(((0.176)*x2116))+(((0.176)*x2124))+((r00*x2125)))))+(IKabs(((((0.176)*sj4*x2112))+(((-1.0)*x2101))+((r10*x2125))+(((-1.0)*cj0*x2117))+((cj0*x2106*x2115))+((x2115*x2123))+((cj0*x2104*x2106))+(((0.176)*x2113))+(((0.68)*cj0*x2110))+(((-1.0)*cj0*x2126))+((x2104*x2123))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x2147=((0.48)*sj0);
IkReal x2148=(sj4*sj5);
IkReal x2149=(cj5*sj4);
IkReal x2150=(cj4*sj0);
IkReal x2151=(r20*sj5);
IkReal x2152=((2.04)*sj0);
IkReal x2153=(pz*sj0);
IkReal x2154=(cj5*r21);
IkReal x2155=(cj4*r02);
IkReal x2156=((0.68)*sj0);
IkReal x2157=((12.0)*x2153);
IkReal x2158=((0.528)*x2155);
IkReal x2159=((4.0)*x2153);
IkReal x2160=((0.176)*x2155);
IkReal x2161=(r22*sj0*sj4);
IkReal x2162=((0.528)*r01*x2149);
IkReal x2163=((0.048)*x2161);
IkReal x2164=((0.528)*r00*x2148);
IkReal x2165=((2.04)*r22*x2150);
IkReal x2166=((0.016)*x2161);
IkReal x2167=((0.176)*r01*x2149);
IkReal x2168=((0.176)*r00*x2148);
IkReal x2169=((0.68)*r22*x2150);
IkReal x2170=(r21*x2149*x2152);
IkReal x2171=((0.048)*x2150*x2154);
IkReal x2172=((0.048)*x2150*x2151);
IkReal x2173=(r20*x2148*x2152);
IkReal x2174=(r21*x2149*x2156);
IkReal x2175=((0.016)*x2150*x2154);
IkReal x2176=((0.016)*x2150*x2151);
IkReal x2177=(r20*x2148*x2156);
IkReal x2178=(x2168+x2167+x2166+x2160+x2159);
IkReal x2179=(x2164+x2163+x2162+x2157+x2158);
IkReal x2180=(x2176+x2177+x2174+x2175+x2169);
IkReal x2181=(x2172+x2173+x2170+x2171+x2165);
op[0]=(x2178+x2147+(((-1.0)*x2180)));
op[1]=0;
op[2]=(x2179+x2147+(((-1.0)*x2181)));
op[3]=0;
op[4]=(x2179+(((-1.0)*x2147))+(((-1.0)*x2181)));
op[5]=0;
op[6]=(x2178+(((-1.0)*x2147))+(((-1.0)*x2180)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2182=((0.48)*cj0);
IkReal x2183=((0.048)*cj4);
IkReal x2184=((0.68)*sj4);
IkReal x2185=(cj0*sj4);
IkReal x2186=(r20*sj5);
IkReal x2187=(cj4*r12);
IkReal x2188=((0.016)*cj4);
IkReal x2189=(cj0*pz);
IkReal x2190=((0.528)*x2187);
IkReal x2191=((12.0)*x2189);
IkReal x2192=((0.176)*x2187);
IkReal x2193=((4.0)*x2189);
IkReal x2194=(cj0*cj5*r21);
IkReal x2195=(cj0*cj4*r22);
IkReal x2196=(r10*sj4*sj5);
IkReal x2197=(cj5*r11*sj4);
IkReal x2198=((2.04)*x2195);
IkReal x2199=((0.528)*x2197);
IkReal x2200=((0.528)*x2196);
IkReal x2201=((0.048)*r22*x2185);
IkReal x2202=((0.176)*x2197);
IkReal x2203=((0.68)*x2195);
IkReal x2204=((0.176)*x2196);
IkReal x2205=((0.016)*r22*x2185);
IkReal x2206=(x2183*x2194);
IkReal x2207=((2.04)*x2185*x2186);
IkReal x2208=(cj0*x2183*x2186);
IkReal x2209=((2.04)*cj5*r21*x2185);
IkReal x2210=(cj0*x2186*x2188);
IkReal x2211=(cj0*x2184*x2186);
IkReal x2212=(x2184*x2194);
IkReal x2213=(x2188*x2194);
IkReal x2214=(x2201+x2191);
IkReal x2215=(x2205+x2193);
IkReal x2216=(x2202+x2203+x2204+x2213+x2212+x2211+x2210+x2192);
IkReal x2217=(x2200+x2206+x2207+x2208+x2209+x2190+x2198+x2199);
j1evalpoly[0]=(x2216+(((-1.0)*x2215))+x2182+(((htj1*htj1)*((x2217+(((-1.0)*x2214))+x2182))))+(((htj1*htj1*htj1*htj1)*((x2217+(((-1.0)*x2214))+(((-1.0)*x2182))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x2216+(((-1.0)*x2215))+(((-1.0)*x2182)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2218=(r22*sj1);
IkReal x2219=(cj3*sj4);
IkReal x2220=(r20*sj5);
IkReal x2221=(cj5*r21);
IkReal x2222=(cj1*r22);
IkReal x2223=(cj1*sj4);
IkReal x2224=((1.0)*sj1);
IkReal x2225=(cj3*cj4);
IkReal x2226=(sj1*sj4);
IkReal x2227=(cj1*x2225);
IkReal x2228=(cj5*r20*sj3);
IkReal x2229=(r21*sj3*sj5);
if( IKabs(((((-1.0)*x2221*x2224*x2225))+((sj1*x2229))+(((-1.0)*x2224*x2228))+((cj4*x2222))+(((-1.0)*x2220*x2224*x2225))+((x2220*x2223))+((x2221*x2223))+((x2218*x2219)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x2218))+(((-1.0)*x2219*x2222))+((x2220*x2226))+((x2220*x2227))+((x2221*x2226))+((x2221*x2227))+((cj1*x2228))+(((-1.0)*cj1*x2229)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2221*x2224*x2225))+((sj1*x2229))+(((-1.0)*x2224*x2228))+((cj4*x2222))+(((-1.0)*x2220*x2224*x2225))+((x2220*x2223))+((x2221*x2223))+((x2218*x2219))))+IKsqr((((cj4*x2218))+(((-1.0)*x2219*x2222))+((x2220*x2226))+((x2220*x2227))+((x2221*x2226))+((x2221*x2227))+((cj1*x2228))+(((-1.0)*cj1*x2229))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2221*x2224*x2225))+((sj1*x2229))+(((-1.0)*x2224*x2228))+((cj4*x2222))+(((-1.0)*x2220*x2224*x2225))+((x2220*x2223))+((x2221*x2223))+((x2218*x2219))), (((cj4*x2218))+(((-1.0)*x2219*x2222))+((x2220*x2226))+((x2220*x2227))+((x2221*x2226))+((x2221*x2227))+((cj1*x2228))+(((-1.0)*cj1*x2229))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2230=IKsin(j2);
IkReal x2231=IKcos(j2);
IkReal x2232=(r02*sj4);
IkReal x2233=(sj3*sj5);
IkReal x2234=((1.0)*cj3);
IkReal x2235=((1.0)*cj0);
IkReal x2236=((1.0)*cj4);
IkReal x2237=(cj4*sj5);
IkReal x2238=((0.004)*sj4);
IkReal x2239=((0.12)*sj1);
IkReal x2240=((0.044)*cj0);
IkReal x2241=(cj3*sj4);
IkReal x2242=(cj4*cj5);
IkReal x2243=((0.17)*cj0);
IkReal x2244=(cj1*x2231);
IkReal x2245=((1.0)*cj5*sj3);
IkReal x2246=(r01*x2242);
IkReal x2247=(sj0*x2230);
IkReal x2248=((0.004)*x2242);
IkReal x2249=(cj1*x2230);
IkReal x2250=((1.0)*sj4*sj5);
IkReal x2251=(sj1*x2230);
IkReal x2252=(sj1*x2231);
IkReal x2253=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r21*x2253))+x2249+x2252+(((-1.0)*r22*x2236))+(((-1.0)*r20*x2250)));
evalcond[1]=((((-1.0)*r02*x2236))+(((-1.0)*r00*x2250))+((sj1*x2247))+(((-1.0)*sj0*x2244))+(((-1.0)*r01*x2253)));
evalcond[2]=((((-1.0)*r11*x2253))+(((-1.0)*r10*x2250))+(((-1.0)*r12*x2236))+(((-1.0)*x2235*x2251))+((cj0*x2244)));
evalcond[3]=(x2244+(((-1.0)*x2251))+((r21*x2233))+(((-1.0)*r20*x2234*x2237))+(((-1.0)*r20*x2245))+((r22*x2241))+(((-1.0)*r21*x2234*x2242)));
evalcond[4]=((((-1.0)*x2234*x2246))+((cj1*x2247))+(((-1.0)*r00*x2245))+((sj0*x2252))+(((-1.0)*r00*x2234*x2237))+((r01*x2233))+((cj3*x2232)));
evalcond[5]=((((-1.0)*r11*x2234*x2242))+(((-1.0)*r10*x2245))+(((-1.0)*x2235*x2252))+((r11*x2233))+(((-1.0)*x2235*x2249))+((r12*x2241))+(((-1.0)*r10*x2234*x2237)));
evalcond[6]=((((0.004)*r20*x2237))+(((-0.044)*x2251))+(((-1.0)*pz))+(((0.17)*x2252))+(((-1.0)*r22*x2238))+((r21*x2248))+(((0.17)*x2249))+(((0.12)*cj1))+(((0.044)*x2244)));
evalcond[7]=((((0.004)*x2246))+((sj0*x2239))+(((0.044)*cj1*x2247))+(((0.004)*r00*x2237))+(((-0.004)*x2232))+(((0.044)*sj0*x2252))+(((-1.0)*px))+(((-0.017)*sj0))+(((0.17)*sj1*x2247))+(((-0.17)*sj0*x2244)));
evalcond[8]=(((r11*x2248))+((x2243*x2244))+(((0.017)*cj0))+(((0.004)*r10*x2237))+(((-1.0)*cj0*x2239))+(((-1.0)*py))+(((-1.0)*x2240*x2249))+(((-1.0)*x2243*x2251))+(((-1.0)*r12*x2238))+(((-1.0)*x2240*x2252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - yara (39844c7b34f7338b6fb6367c8a778cb0)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
